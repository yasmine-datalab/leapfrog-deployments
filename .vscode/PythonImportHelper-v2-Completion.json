[
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BackgroundTasks",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "WebSocket",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BackgroundTasks",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "BackgroundTasks",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "KeycloakUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "OIDCUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "KeycloakUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "OIDCUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "FastAPIKeycloak",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "KeycloakUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "OIDCUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "KeycloakUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "KeycloakError",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "KeycloakUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "OIDCUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "FastAPIKeycloak",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "KeycloakUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "OIDCUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "KeycloakUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "KeycloakError",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "OIDCUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "OIDCUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "OIDCUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "FastAPIKeycloak",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "KeycloakUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "OIDCUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "KeycloakError",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "OIDCUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "OIDCUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "OIDCUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "OIDCUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "OIDCUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "OIDCUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "OIDCUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "OIDCUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "FastAPIKeycloak",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "KeycloakUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "OIDCUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "KeycloakUser",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "KeycloakError",
        "importPath": "fastapi_keycloak",
        "description": "fastapi_keycloak",
        "isExtraImport": true,
        "detail": "fastapi_keycloak",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Params",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Params",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Params",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Page",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "Params",
        "importPath": "fastapi_pagination",
        "description": "fastapi_pagination",
        "isExtraImport": true,
        "detail": "fastapi_pagination",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "HttpUrl",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "HttpUrl",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "HttpUrl",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "HttpUrl",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "HttpUrl",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "UUID4",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Discussion",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Discussion",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Discussion",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Discussion",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "PaymentMethod",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Plan",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Subscription",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "PaymentIntent",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "PaymentMethod",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Plan",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "PaymentMethod",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Plan",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Subscription",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "PaymentIntent",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "PaymentIntent",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Plan",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Certificate",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Course",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CourseProgress",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Lesson",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Note",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Instructor",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Lesson",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Note",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CourseProgress",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Course",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CourseProgress",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Lesson",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Instructor",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Course",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CourseProgress",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Certificate",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CourseProgress",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Certificate",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CourseProgress",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Course",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Lesson",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CommentCreate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CommentUpdate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Discussion",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "DiscussionCreate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "DiscussionUpdate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Discussion",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "NotificationCreate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "NotificationBase",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "NotificationType",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Notification",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "NotificationCreate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "PaymentMethod",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "PaymentMethodCreate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "PaymentMethodUpdate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Roles",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Plan",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "PlanCreate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "PlanUpdate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Roles",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Subscription",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ActionType",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "SubscriptionUpdate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Roles",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "SubscriptionStatus",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "PaymentIntentCreate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "PaymentIntentOut",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "PaymentStatus",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "BillingCycle",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Payment",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "PaymentMethod",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Plan",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Subscription",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "PaymentIntent",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "NotificationCreate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "NotificationBase",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "NotificationType",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Certificate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Roles",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Course",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CourseUpdate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CourseCreate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CourseProgram",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CourseProgress",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CourseProgressUpdate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Roles",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "InstructorCreate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Instructor",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "InstructorUpdate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Roles",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Lesson",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "LessonUpdate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "LessonCreate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ModuleUpdate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ModuleCreate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Roles",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Note",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "NoteCreate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "NoteUpdate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ReviewUpdate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ReviewCreate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Roles",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "StudentCreate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "StudentUpdate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Roles",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "SubscriptionStatus",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Certificate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Course",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "CourseProgress",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Instructor",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Lesson",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Module",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Note",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "get_keycloak_user",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "idp",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "get_keycloak_user",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "idp",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "rabbit_connection",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "idp",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "init_database",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "close_database",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "configure_logging",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "get_keycloak_user",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "idp",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "rabbit_connection",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "idp",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "init_database",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "close_database",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "configure_logging",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "idp",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "get_keycloak_user",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "idp",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "get_keycloak_user",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "idp",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "rabbit_connection",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "init_database",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "close_database",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "idp",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "idp",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "idp",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "get_keycloak_user",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "idp",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "get_keycloak_user",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "verify_user_id",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "idp",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "idp",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "idp",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "idp",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "idp",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "get_keycloak_user",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "verify_user_id",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "get_session",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "idp",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "init_database",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "close_database",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "configure_logging",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "send_comment_notification",
        "importPath": "services",
        "description": "services",
        "isExtraImport": true,
        "detail": "services",
        "documentation": {}
    },
    {
        "label": "checkout_with_paypal",
        "importPath": "services",
        "description": "services",
        "isExtraImport": true,
        "detail": "services",
        "documentation": {}
    },
    {
        "label": "verify_paypal_webhook",
        "importPath": "services",
        "description": "services",
        "isExtraImport": true,
        "detail": "services",
        "documentation": {}
    },
    {
        "label": "send_notification",
        "importPath": "services",
        "description": "services",
        "isExtraImport": true,
        "detail": "services",
        "documentation": {}
    },
    {
        "label": "complete_lesson",
        "importPath": "services",
        "description": "services",
        "isExtraImport": true,
        "detail": "services",
        "documentation": {}
    },
    {
        "label": "save_in_minio",
        "importPath": "services",
        "description": "services",
        "isExtraImport": true,
        "detail": "services",
        "documentation": {}
    },
    {
        "label": "generate_certificate",
        "importPath": "services",
        "description": "services",
        "isExtraImport": true,
        "detail": "services",
        "documentation": {}
    },
    {
        "label": "save_in_minio",
        "importPath": "services",
        "description": "services",
        "isExtraImport": true,
        "detail": "services",
        "documentation": {}
    },
    {
        "label": "get_user_subscription",
        "importPath": "services",
        "description": "services",
        "isExtraImport": true,
        "detail": "services",
        "documentation": {}
    },
    {
        "label": "CustomParams",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "paginate_model",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "CustomParams",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "paginate_model",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "token_fetcher",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "token_saver",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "CustomParams",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "paginate_model",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "token_fetcher",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "token_saver",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "CustomParams",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "paginate_model",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "CustomParams",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "paginate_model",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "CustomParams",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "paginate_model",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "token_fetcher",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "token_saver",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "CustomParams",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "paginate_model",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "CustomParams",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "paginate_model",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "CustomParams",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "paginate_model",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "CustomParams",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "paginate_model",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "CustomParams",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "paginate_model",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "CustomParams",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "paginate_model",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "CustomParams",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "paginate_model",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "CustomParams",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "paginate_model",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "token_fetcher",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "token_saver",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "DeleteRules",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "init_beanie",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "Link",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "init_beanie",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "init_beanie",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "Indexed",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "Indexed",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "Link",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "DeleteRules",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "init_beanie",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "Link",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "after_event",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "Delete",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "Indexed",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "Link",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "Indexed",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "beanie",
        "description": "beanie",
        "isExtraImport": true,
        "detail": "beanie",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "AsyncIOMotorClient",
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "isExtraImport": true,
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOMotorClient",
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "isExtraImport": true,
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOMotorClient",
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "isExtraImport": true,
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncIOMotorClient",
        "importPath": "motor.motor_asyncio",
        "description": "motor.motor_asyncio",
        "isExtraImport": true,
        "detail": "motor.motor_asyncio",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "aio_pika",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aio_pika",
        "description": "aio_pika",
        "detail": "aio_pika",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "UserNotFound",
        "importPath": "fastapi_keycloak.exceptions",
        "description": "fastapi_keycloak.exceptions",
        "isExtraImport": true,
        "detail": "fastapi_keycloak.exceptions",
        "documentation": {}
    },
    {
        "label": "KeycloakError",
        "importPath": "fastapi_keycloak.exceptions",
        "description": "fastapi_keycloak.exceptions",
        "isExtraImport": true,
        "detail": "fastapi_keycloak.exceptions",
        "documentation": {}
    },
    {
        "label": "UserNotFound",
        "importPath": "fastapi_keycloak.exceptions",
        "description": "fastapi_keycloak.exceptions",
        "isExtraImport": true,
        "detail": "fastapi_keycloak.exceptions",
        "documentation": {}
    },
    {
        "label": "KeycloakError",
        "importPath": "fastapi_keycloak.exceptions",
        "description": "fastapi_keycloak.exceptions",
        "isExtraImport": true,
        "detail": "fastapi_keycloak.exceptions",
        "documentation": {}
    },
    {
        "label": "UserNotFound",
        "importPath": "fastapi_keycloak.exceptions",
        "description": "fastapi_keycloak.exceptions",
        "isExtraImport": true,
        "detail": "fastapi_keycloak.exceptions",
        "documentation": {}
    },
    {
        "label": "KeycloakError",
        "importPath": "fastapi_keycloak.exceptions",
        "description": "fastapi_keycloak.exceptions",
        "isExtraImport": true,
        "detail": "fastapi_keycloak.exceptions",
        "documentation": {}
    },
    {
        "label": "UserNotFound",
        "importPath": "fastapi_keycloak.exceptions",
        "description": "fastapi_keycloak.exceptions",
        "isExtraImport": true,
        "detail": "fastapi_keycloak.exceptions",
        "documentation": {}
    },
    {
        "label": "KeycloakError",
        "importPath": "fastapi_keycloak.exceptions",
        "description": "fastapi_keycloak.exceptions",
        "isExtraImport": true,
        "detail": "fastapi_keycloak.exceptions",
        "documentation": {}
    },
    {
        "label": "FindMany",
        "importPath": "beanie.odm.queries.find",
        "description": "beanie.odm.queries.find",
        "isExtraImport": true,
        "detail": "beanie.odm.queries.find",
        "documentation": {}
    },
    {
        "label": "FindMany",
        "importPath": "beanie.odm.queries.find",
        "description": "beanie.odm.queries.find",
        "isExtraImport": true,
        "detail": "beanie.odm.queries.find",
        "documentation": {}
    },
    {
        "label": "FindMany",
        "importPath": "beanie.odm.queries.find",
        "description": "beanie.odm.queries.find",
        "isExtraImport": true,
        "detail": "beanie.odm.queries.find",
        "documentation": {}
    },
    {
        "label": "FindMany",
        "importPath": "beanie.odm.queries.find",
        "description": "beanie.odm.queries.find",
        "isExtraImport": true,
        "detail": "beanie.odm.queries.find",
        "documentation": {}
    },
    {
        "label": "FindMany",
        "importPath": "beanie.odm.queries.find",
        "description": "beanie.odm.queries.find",
        "isExtraImport": true,
        "detail": "beanie.odm.queries.find",
        "documentation": {}
    },
    {
        "label": "FindMany",
        "importPath": "beanie.odm.queries.find",
        "description": "beanie.odm.queries.find",
        "isExtraImport": true,
        "detail": "beanie.odm.queries.find",
        "documentation": {}
    },
    {
        "label": "FindMany",
        "importPath": "beanie.odm.queries.find",
        "description": "beanie.odm.queries.find",
        "isExtraImport": true,
        "detail": "beanie.odm.queries.find",
        "documentation": {}
    },
    {
        "label": "FindMany",
        "importPath": "beanie.odm.queries.find",
        "description": "beanie.odm.queries.find",
        "isExtraImport": true,
        "detail": "beanie.odm.queries.find",
        "documentation": {}
    },
    {
        "label": "FindMany",
        "importPath": "beanie.odm.queries.find",
        "description": "beanie.odm.queries.find",
        "isExtraImport": true,
        "detail": "beanie.odm.queries.find",
        "documentation": {}
    },
    {
        "label": "FindMany",
        "importPath": "beanie.odm.queries.find",
        "description": "beanie.odm.queries.find",
        "isExtraImport": true,
        "detail": "beanie.odm.queries.find",
        "documentation": {}
    },
    {
        "label": "FindMany",
        "importPath": "beanie.odm.queries.find",
        "description": "beanie.odm.queries.find",
        "isExtraImport": true,
        "detail": "beanie.odm.queries.find",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "AMQPConnectionError",
        "importPath": "aiormq",
        "description": "aiormq",
        "isExtraImport": true,
        "detail": "aiormq",
        "documentation": {}
    },
    {
        "label": "AMQPConnectionError",
        "importPath": "aiormq",
        "description": "aiormq",
        "isExtraImport": true,
        "detail": "aiormq",
        "documentation": {}
    },
    {
        "label": "AMQPConnectionError",
        "importPath": "aiormq",
        "description": "aiormq",
        "isExtraImport": true,
        "detail": "aiormq",
        "documentation": {}
    },
    {
        "label": "rabbit_connection",
        "importPath": "core.rabbit",
        "description": "core.rabbit",
        "isExtraImport": true,
        "detail": "core.rabbit",
        "documentation": {}
    },
    {
        "label": "rabbit_connection",
        "importPath": "core.rabbit",
        "description": "core.rabbit",
        "isExtraImport": true,
        "detail": "core.rabbit",
        "documentation": {}
    },
    {
        "label": "rabbit_connection",
        "importPath": "core.rabbit",
        "description": "core.rabbit",
        "isExtraImport": true,
        "detail": "core.rabbit",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "paginate",
        "importPath": "fastapi_pagination.ext.beanie",
        "description": "fastapi_pagination.ext.beanie",
        "isExtraImport": true,
        "detail": "fastapi_pagination.ext.beanie",
        "documentation": {}
    },
    {
        "label": "paginate",
        "importPath": "fastapi_pagination.ext.beanie",
        "description": "fastapi_pagination.ext.beanie",
        "isExtraImport": true,
        "detail": "fastapi_pagination.ext.beanie",
        "documentation": {}
    },
    {
        "label": "paginate",
        "importPath": "fastapi_pagination.ext.beanie",
        "description": "fastapi_pagination.ext.beanie",
        "isExtraImport": true,
        "detail": "fastapi_pagination.ext.beanie",
        "documentation": {}
    },
    {
        "label": "paginate",
        "importPath": "fastapi_pagination.ext.beanie",
        "description": "fastapi_pagination.ext.beanie",
        "isExtraImport": true,
        "detail": "fastapi_pagination.ext.beanie",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "ExpiredSignatureError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "ExpiredSignatureError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "ExpiredSignatureError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "ExpiredSignatureError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "RequestValidationError",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "RequestValidationError",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "RequestValidationError",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "RequestValidationError",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "RequestValidationError",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "RequestValidationError",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "RequestValidationError",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "RequestValidationError",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "discussion_router",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "comment_router",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "send_notification",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "get_user_connection",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "notification_router",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "plan_router",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "subscription_router",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "payment_method_router",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "course_router",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "instructor_router",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "module_router",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "lesson_router",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "student_router",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "review_router",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "certificate_router",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "perform_create_notification",
        "importPath": "services.notification",
        "description": "services.notification",
        "isExtraImport": true,
        "detail": "services.notification",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "FastMail",
        "importPath": "fastapi_mail",
        "description": "fastapi_mail",
        "isExtraImport": true,
        "detail": "fastapi_mail",
        "documentation": {}
    },
    {
        "label": "MessageSchema",
        "importPath": "fastapi_mail",
        "description": "fastapi_mail",
        "isExtraImport": true,
        "detail": "fastapi_mail",
        "documentation": {}
    },
    {
        "label": "ConnectionConfig",
        "importPath": "fastapi_mail",
        "description": "fastapi_mail",
        "isExtraImport": true,
        "detail": "fastapi_mail",
        "documentation": {}
    },
    {
        "label": "MessageType",
        "importPath": "fastapi_mail",
        "description": "fastapi_mail",
        "isExtraImport": true,
        "detail": "fastapi_mail",
        "documentation": {}
    },
    {
        "label": "idp",
        "importPath": "core.security",
        "description": "core.security",
        "isExtraImport": true,
        "detail": "core.security",
        "documentation": {}
    },
    {
        "label": "processors",
        "importPath": "services.event_service",
        "description": "services.event_service",
        "isExtraImport": true,
        "detail": "services.event_service",
        "documentation": {}
    },
    {
        "label": "PydanticCustomError",
        "importPath": "pydantic_core",
        "description": "pydantic_core",
        "isExtraImport": true,
        "detail": "pydantic_core",
        "documentation": {}
    },
    {
        "label": "InitErrorDetails",
        "importPath": "pydantic_core",
        "description": "pydantic_core",
        "isExtraImport": true,
        "detail": "pydantic_core",
        "documentation": {}
    },
    {
        "label": "PydanticCustomError",
        "importPath": "pydantic_core",
        "description": "pydantic_core",
        "isExtraImport": true,
        "detail": "pydantic_core",
        "documentation": {}
    },
    {
        "label": "InitErrorDetails",
        "importPath": "pydantic_core",
        "description": "pydantic_core",
        "isExtraImport": true,
        "detail": "pydantic_core",
        "documentation": {}
    },
    {
        "label": "PydanticCustomError",
        "importPath": "pydantic_core",
        "description": "pydantic_core",
        "isExtraImport": true,
        "detail": "pydantic_core",
        "documentation": {}
    },
    {
        "label": "InitErrorDetails",
        "importPath": "pydantic_core",
        "description": "pydantic_core",
        "isExtraImport": true,
        "detail": "pydantic_core",
        "documentation": {}
    },
    {
        "label": "PydanticCustomError",
        "importPath": "pydantic_core",
        "description": "pydantic_core",
        "isExtraImport": true,
        "detail": "pydantic_core",
        "documentation": {}
    },
    {
        "label": "InitErrorDetails",
        "importPath": "pydantic_core",
        "description": "pydantic_core",
        "isExtraImport": true,
        "detail": "pydantic_core",
        "documentation": {}
    },
    {
        "label": "Subscription",
        "importPath": "schemas.subscription",
        "description": "schemas.subscription",
        "isExtraImport": true,
        "detail": "schemas.subscription",
        "documentation": {}
    },
    {
        "label": "Subscription",
        "importPath": "schemas.subscription",
        "description": "schemas.subscription",
        "isExtraImport": true,
        "detail": "schemas.subscription",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "HTTP_422_UNPROCESSABLE_ENTITY",
        "importPath": "starlette.status",
        "description": "starlette.status",
        "isExtraImport": true,
        "detail": "starlette.status",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "DocxTemplate",
        "importPath": "docxtpl",
        "description": "docxtpl",
        "isExtraImport": true,
        "detail": "docxtpl",
        "documentation": {}
    },
    {
        "label": "StrictUndefined",
        "importPath": "jinja2",
        "description": "jinja2",
        "isExtraImport": true,
        "detail": "jinja2",
        "documentation": {}
    },
    {
        "label": "Environment",
        "importPath": "jinja2",
        "description": "jinja2",
        "isExtraImport": true,
        "detail": "jinja2",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Minio",
        "importPath": "minio",
        "description": "minio",
        "isExtraImport": true,
        "detail": "minio",
        "documentation": {}
    },
    {
        "label": "S3Error",
        "importPath": "minio.error",
        "description": "minio.error",
        "isExtraImport": true,
        "detail": "minio.error",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "core.log",
        "description": "core.log",
        "isExtraImport": true,
        "detail": "core.log",
        "documentation": {}
    },
    {
        "label": "comment_router",
        "kind": 5,
        "importPath": "leapfrog-discussion-service.api.comment",
        "description": "leapfrog-discussion-service.api.comment",
        "peekOfCode": "comment_router = APIRouter(prefix=\"/comments\", tags=[\"Comments\"])\nasync def get_user_comment_by_id(comment_id: UUID4, current_user: KeycloakUser):\n    \"\"\"Get comment By Id for A user\"\"\"\n    user = get_keycloak_user(current_user=current_user, fetch_user=True)\n    comment = await Comment.get(comment_id)\n    if comment is None or (comment.author != user.id):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, detail=\"Comment not found\"\n        )\n    return comment",
        "detail": "leapfrog-discussion-service.api.comment",
        "documentation": {}
    },
    {
        "label": "discussion_router",
        "kind": 5,
        "importPath": "leapfrog-discussion-service.api.discussion",
        "description": "leapfrog-discussion-service.api.discussion",
        "peekOfCode": "discussion_router = APIRouter(prefix=\"/discussions\", tags=[\"Discussions\"])\nasync def get_user_discussion_by_id(discussion_id: UUID4, current_user: KeycloakUser):\n    \"\"\"Get discussion By Id for A user\"\"\"\n    user = get_keycloak_user(current_user=current_user, fetch_user=True)\n    discussion = await Discussion.get(discussion_id)\n    if discussion is None or (discussion.created_by != user.id):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, detail=\"Discussion not found\"\n        )\n    return discussion",
        "detail": "leapfrog-discussion-service.api.discussion",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "leapfrog-discussion-service.core.config",
        "description": "leapfrog-discussion-service.core.config",
        "peekOfCode": "class Settings(BaseSettings):\n    \"\"\"Env Variables\"\"\"\n    # General\n    API_TITLE: str\n    API_HOST: str\n    API_PORT: int\n    # Keycloak\n    KEYCLOAK_SERVER: str\n    KEYCLOAK_CLIENT_ID: str\n    KEYCLOAK_CLIENT_SECRET: str",
        "detail": "leapfrog-discussion-service.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "leapfrog-discussion-service.core.config",
        "description": "leapfrog-discussion-service.core.config",
        "peekOfCode": "settings = Settings()",
        "detail": "leapfrog-discussion-service.core.config",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "leapfrog-discussion-service.core.database",
        "description": "leapfrog-discussion-service.core.database",
        "peekOfCode": "client = AsyncIOMotorClient(\n    f\"mongodb://{settings.MONGO_USER}:{settings.MONGO_PASSWORD}@{settings.MONGO_HOST}:{settings.MONGO_PORT}\",\n    uuidRepresentation=\"standard\",\n)\nasync def init_database():\n    \"\"\"Init database connection\"\"\"\n    await init_beanie(\n        database=client[settings.MONGO_DB],\n        document_models=[Discussion, Comment],\n    )",
        "detail": "leapfrog-discussion-service.core.database",
        "documentation": {}
    },
    {
        "label": "configure_logging",
        "kind": 2,
        "importPath": "leapfrog-discussion-service.core.log",
        "description": "leapfrog-discussion-service.core.log",
        "peekOfCode": "def configure_logging():\n    \"\"\"Configure logging for whole app\"\"\"\n    app_name = settings.API_TITLE.replace(\" \", \"-\").lower()\n    log_level = settings.LOG_LEVEL\n    log_file_pattern = f\"{app_name}_*.log\"  # Pattern for log files\n    log_dir = \"logs\"  # Directory to store logs\n    # Create the log directory if it doesn't exist\n    os.makedirs(log_dir, exist_ok=True)\n    # Find the highest existing log number to increment from\n    existing_logs = glob.glob(os.path.join(log_dir, log_file_pattern))",
        "detail": "leapfrog-discussion-service.core.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "leapfrog-discussion-service.core.log",
        "description": "leapfrog-discussion-service.core.log",
        "peekOfCode": "logger = logging.getLogger(__name__)",
        "detail": "leapfrog-discussion-service.core.log",
        "documentation": {}
    },
    {
        "label": "init_keycloak",
        "kind": 2,
        "importPath": "leapfrog-discussion-service.core.security",
        "description": "leapfrog-discussion-service.core.security",
        "peekOfCode": "def init_keycloak():\n    \"\"\"Init Keycloak instance for FastAPI\"\"\"\n    return FastAPIKeycloak(\n        server_url=settings.KEYCLOAK_SERVER,\n        client_id=settings.KEYCLOAK_CLIENT_ID,\n        client_secret=settings.KEYCLOAK_CLIENT_SECRET,\n        admin_client_secret=settings.KEYCLOAK_ADMIN_CLIENT_SECRET,\n        realm=settings.KEYCLOAK_REALM,\n        callback_uri=settings.KEYCLOAK_CALLBACK_URI,\n    )",
        "detail": "leapfrog-discussion-service.core.security",
        "documentation": {}
    },
    {
        "label": "get_keycloak_user",
        "kind": 2,
        "importPath": "leapfrog-discussion-service.core.security",
        "description": "leapfrog-discussion-service.core.security",
        "peekOfCode": "def get_keycloak_user(\n    current_user: OIDCUser,\n    required_roles: List[str] = None,\n    fetch_user: bool = False,\n) -> KeycloakUser:\n    \"\"\"Retrieves a KeycloakUser from the current_user.\"\"\"\n    if required_roles:\n        msg = f\"One of thes roles ({', '.join(required_roles)}) is required to perform this action\"\n        if not any(role in current_user.roles for role in required_roles):\n            raise HTTPException(",
        "detail": "leapfrog-discussion-service.core.security",
        "documentation": {}
    },
    {
        "label": "get_token",
        "kind": 2,
        "importPath": "leapfrog-discussion-service.core.security",
        "description": "leapfrog-discussion-service.core.security",
        "peekOfCode": "def get_token():\n    \"\"\"get Token\"\"\"\n    headers = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\n    data = {\n        \"client_id\": settings.KEYCLOAK_CLIENT_ID,\n        \"client_secret\": settings.KEYCLOAK_CLIENT_SECRET,\n        \"grant_type\": \"client_credentials\",\n    }\n    response = requests.post(\n        url=idp.token_uri, headers=headers, data=data, timeout=300",
        "detail": "leapfrog-discussion-service.core.security",
        "documentation": {}
    },
    {
        "label": "get_session",
        "kind": 2,
        "importPath": "leapfrog-discussion-service.core.security",
        "description": "leapfrog-discussion-service.core.security",
        "peekOfCode": "def get_session():\n    \"\"\"Get Session\"\"\"\n    # fetching token\n    token = token_fetcher()\n    if token is None or not idp.token_is_valid(token=token):\n        token = get_token()\n        token_saver(token=token)\n    session = requests.Session()\n    # Configuration de la session si nécessaire (headers, etc.)\n    session.headers.setdefault(\"Authorization\", f\"Bearer {token}\")",
        "detail": "leapfrog-discussion-service.core.security",
        "documentation": {}
    },
    {
        "label": "idp",
        "kind": 5,
        "importPath": "leapfrog-discussion-service.core.security",
        "description": "leapfrog-discussion-service.core.security",
        "peekOfCode": "idp = init_keycloak()\ndef get_keycloak_user(\n    current_user: OIDCUser,\n    required_roles: List[str] = None,\n    fetch_user: bool = False,\n) -> KeycloakUser:\n    \"\"\"Retrieves a KeycloakUser from the current_user.\"\"\"\n    if required_roles:\n        msg = f\"One of thes roles ({', '.join(required_roles)}) is required to perform this action\"\n        if not any(role in current_user.roles for role in required_roles):",
        "detail": "leapfrog-discussion-service.core.security",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "leapfrog-discussion-service.models.comment",
        "description": "leapfrog-discussion-service.models.comment",
        "peekOfCode": "class Comment(DocumentBase, CommentBase):\n    \"\"\"Comment Db model\"\"\"\n    def __repr__(self) -> str:\n        return f\"<Comment {self.discussion_id}/user: {self.author}: {self.text}>\"\n    def __str__(self) -> str:\n        return f\"{self.discussion_id}/user: {self.author}: {self.text}\"\n    @classmethod\n    def get_discussion_id(cls, discussion_id: str) -> FindMany[\"Comment\"]:\n        \"\"\"Get comments by discussion id.\"\"\"\n        return cls.find(cls.discussion_id == discussion_id)",
        "detail": "leapfrog-discussion-service.models.comment",
        "documentation": {}
    },
    {
        "label": "Discussion",
        "kind": 6,
        "importPath": "leapfrog-discussion-service.models.discussion",
        "description": "leapfrog-discussion-service.models.discussion",
        "peekOfCode": "class Discussion(DocumentBase, DiscussionBase):\n    \"\"\"Discussion Db model\"\"\"\n    comments: List[Link[Comment]] = []\n    def __repr__(self) -> str:\n        return f\"<Discussion {self.category}/owner: {self.created_at}: {self.detail}>\"\n    def __str__(self) -> str:\n        return f\"{self.category}/owner: {self.created_by}: {self.detail}\"\n    @classmethod\n    def get_user_id(cls, user_id: str) -> FindMany[\"Discussion\"]:\n        \"\"\"Get Discussions by user id.\"\"\"",
        "detail": "leapfrog-discussion-service.models.discussion",
        "documentation": {}
    },
    {
        "label": "DocumentBase",
        "kind": 6,
        "importPath": "leapfrog-discussion-service.models.document",
        "description": "leapfrog-discussion-service.models.document",
        "peekOfCode": "class DocumentBase(Document):\n    \"\"\"Document Base Db model\"\"\"\n    id: UUID4 = Field(default_factory=uuid4, alias=\"_id\")\n    created_at: datetime = Field(default_factory=datetime.now)\n    updated_at: datetime = Field(default_factory=datetime.now)\n    async def save(self, *args, **kwargs):\n        self.updated_at = datetime.now()\n        await super().save(*args, **kwargs)",
        "detail": "leapfrog-discussion-service.models.document",
        "documentation": {}
    },
    {
        "label": "CommentBase",
        "kind": 6,
        "importPath": "leapfrog-discussion-service.schemas.comment",
        "description": "leapfrog-discussion-service.schemas.comment",
        "peekOfCode": "class CommentBase(BaseModel):\n    \"\"\"Comment Base model\"\"\"\n    text: str\nclass CommentCreate(CommentBase):\n    \"\"\"Comment Creation model\"\"\"\n    discussion_id: UUID4\nclass CommentUpdate(BaseModel):\n    \"\"\"Comment Update model\"\"\"\n    text: Optional[str] = None\nclass Comment(CommentCreate):",
        "detail": "leapfrog-discussion-service.schemas.comment",
        "documentation": {}
    },
    {
        "label": "CommentCreate",
        "kind": 6,
        "importPath": "leapfrog-discussion-service.schemas.comment",
        "description": "leapfrog-discussion-service.schemas.comment",
        "peekOfCode": "class CommentCreate(CommentBase):\n    \"\"\"Comment Creation model\"\"\"\n    discussion_id: UUID4\nclass CommentUpdate(BaseModel):\n    \"\"\"Comment Update model\"\"\"\n    text: Optional[str] = None\nclass Comment(CommentCreate):\n    \"\"\"Comment schema\"\"\"\n    id: UUID4\n    author: str",
        "detail": "leapfrog-discussion-service.schemas.comment",
        "documentation": {}
    },
    {
        "label": "CommentUpdate",
        "kind": 6,
        "importPath": "leapfrog-discussion-service.schemas.comment",
        "description": "leapfrog-discussion-service.schemas.comment",
        "peekOfCode": "class CommentUpdate(BaseModel):\n    \"\"\"Comment Update model\"\"\"\n    text: Optional[str] = None\nclass Comment(CommentCreate):\n    \"\"\"Comment schema\"\"\"\n    id: UUID4\n    author: str\n    created_at: datetime\n    updated_at: datetime",
        "detail": "leapfrog-discussion-service.schemas.comment",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "leapfrog-discussion-service.schemas.comment",
        "description": "leapfrog-discussion-service.schemas.comment",
        "peekOfCode": "class Comment(CommentCreate):\n    \"\"\"Comment schema\"\"\"\n    id: UUID4\n    author: str\n    created_at: datetime\n    updated_at: datetime",
        "detail": "leapfrog-discussion-service.schemas.comment",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "leapfrog-discussion-service.schemas.discussion",
        "description": "leapfrog-discussion-service.schemas.discussion",
        "peekOfCode": "class Category(Enum):\n    \"\"\"Category enumerations\"\"\"\n    # to change\n    ALERT = \"Alert\"\n    INFO = \"Info\"\n    ADS = \"Ads\"\nclass DiscussionBase(BaseModel):\n    \"\"\"Discussion Base model\"\"\"\n    title: str\n    category: Category",
        "detail": "leapfrog-discussion-service.schemas.discussion",
        "documentation": {}
    },
    {
        "label": "DiscussionBase",
        "kind": 6,
        "importPath": "leapfrog-discussion-service.schemas.discussion",
        "description": "leapfrog-discussion-service.schemas.discussion",
        "peekOfCode": "class DiscussionBase(BaseModel):\n    \"\"\"Discussion Base model\"\"\"\n    title: str\n    category: Category\n    detail: str\nclass DiscussionCreate(DiscussionBase):\n    \"\"\"Model for discution creation\"\"\"\nclass DiscussionUpdate(BaseModel):\n    \"\"\"Discussion pdate modele\"\"\"\n    title: Optional[str] = None",
        "detail": "leapfrog-discussion-service.schemas.discussion",
        "documentation": {}
    },
    {
        "label": "DiscussionCreate",
        "kind": 6,
        "importPath": "leapfrog-discussion-service.schemas.discussion",
        "description": "leapfrog-discussion-service.schemas.discussion",
        "peekOfCode": "class DiscussionCreate(DiscussionBase):\n    \"\"\"Model for discution creation\"\"\"\nclass DiscussionUpdate(BaseModel):\n    \"\"\"Discussion pdate modele\"\"\"\n    title: Optional[str] = None\n    category: Optional[Category] = None\n    detail: Optional[str] = None\nclass Discussion(DiscussionBase):\n    \"\"\"Discussion schema\"\"\"\n    id: UUID4",
        "detail": "leapfrog-discussion-service.schemas.discussion",
        "documentation": {}
    },
    {
        "label": "DiscussionUpdate",
        "kind": 6,
        "importPath": "leapfrog-discussion-service.schemas.discussion",
        "description": "leapfrog-discussion-service.schemas.discussion",
        "peekOfCode": "class DiscussionUpdate(BaseModel):\n    \"\"\"Discussion pdate modele\"\"\"\n    title: Optional[str] = None\n    category: Optional[Category] = None\n    detail: Optional[str] = None\nclass Discussion(DiscussionBase):\n    \"\"\"Discussion schema\"\"\"\n    id: UUID4\n    comments: Optional[List[Comment]] = []\n    created_by: str",
        "detail": "leapfrog-discussion-service.schemas.discussion",
        "documentation": {}
    },
    {
        "label": "Discussion",
        "kind": 6,
        "importPath": "leapfrog-discussion-service.schemas.discussion",
        "description": "leapfrog-discussion-service.schemas.discussion",
        "peekOfCode": "class Discussion(DiscussionBase):\n    \"\"\"Discussion schema\"\"\"\n    id: UUID4\n    comments: Optional[List[Comment]] = []\n    created_by: str\n    created_at: datetime\n    updated_at: datetime",
        "detail": "leapfrog-discussion-service.schemas.discussion",
        "documentation": {}
    },
    {
        "label": "NotificationType",
        "kind": 6,
        "importPath": "leapfrog-discussion-service.schemas.notification",
        "description": "leapfrog-discussion-service.schemas.notification",
        "peekOfCode": "class NotificationType(Enum):\n    \"\"\"Notification Type\"\"\"\n    ALERT = \"Alert\"\n    INFO = \"Info\"\n    ADS = \"Ads\"\nclass NotificationBase(BaseModel):\n    \"\"\"Notification base model\"\"\"\n    notif_type: NotificationType\n    title: str\n    content: str",
        "detail": "leapfrog-discussion-service.schemas.notification",
        "documentation": {}
    },
    {
        "label": "NotificationBase",
        "kind": 6,
        "importPath": "leapfrog-discussion-service.schemas.notification",
        "description": "leapfrog-discussion-service.schemas.notification",
        "peekOfCode": "class NotificationBase(BaseModel):\n    \"\"\"Notification base model\"\"\"\n    notif_type: NotificationType\n    title: str\n    content: str\nclass NotificationCreate(BaseModel):\n    \"\"\"Notification creation schema\"\"\"\n    user_ids: list[str]\n    content: NotificationBase\nclass Notification(NotificationBase):",
        "detail": "leapfrog-discussion-service.schemas.notification",
        "documentation": {}
    },
    {
        "label": "NotificationCreate",
        "kind": 6,
        "importPath": "leapfrog-discussion-service.schemas.notification",
        "description": "leapfrog-discussion-service.schemas.notification",
        "peekOfCode": "class NotificationCreate(BaseModel):\n    \"\"\"Notification creation schema\"\"\"\n    user_ids: list[str]\n    content: NotificationBase\nclass Notification(NotificationBase):\n    \"\"\"Notification schema\"\"\"\n    id: UUID4\n    user_id: str\n    read: bool = False\n    created_at: datetime",
        "detail": "leapfrog-discussion-service.schemas.notification",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "leapfrog-discussion-service.schemas.notification",
        "description": "leapfrog-discussion-service.schemas.notification",
        "peekOfCode": "class Notification(NotificationBase):\n    \"\"\"Notification schema\"\"\"\n    id: UUID4\n    user_id: str\n    read: bool = False\n    created_at: datetime",
        "detail": "leapfrog-discussion-service.schemas.notification",
        "documentation": {}
    },
    {
        "label": "message_processing_decorator",
        "kind": 2,
        "importPath": "leapfrog-discussion-service.services.event_service.consumer",
        "description": "leapfrog-discussion-service.services.event_service.consumer",
        "peekOfCode": "def message_processing_decorator(func):\n    \"\"\"Message processor decorator\"\"\"\n    async def wrapper(message: aio_pika.abc.AbstractIncomingMessage):\n        try:\n            msg = message.body.decode()\n            data = json.loads(msg)\n            await func(data)\n            await message.ack()\n        except (\n            ValidationError,",
        "detail": "leapfrog-discussion-service.services.event_service.consumer",
        "documentation": {}
    },
    {
        "label": "MessageProcessor",
        "kind": 6,
        "importPath": "leapfrog-discussion-service.services.event_service.processors",
        "description": "leapfrog-discussion-service.services.event_service.processors",
        "peekOfCode": "class MessageProcessor:\n    \"\"\"Message Processor Class\"\"\"\n    queue_name: str\n    processor: Callable\n    async def run(self):\n        \"\"\"Run Message Processor\"\"\"\n        while True:\n            try:\n                await consume(self.queue_name, self.processor)\n            except AMQPConnectionError as error:",
        "detail": "leapfrog-discussion-service.services.event_service.processors",
        "documentation": {}
    },
    {
        "label": "processors",
        "kind": 5,
        "importPath": "leapfrog-discussion-service.services.event_service.processors",
        "description": "leapfrog-discussion-service.services.event_service.processors",
        "peekOfCode": "processors = [\n    # MessageProcessor(\n    #     queue_name=settings.QUEUE_NOTIFICATION_CREATE,\n    #     processor=perform_create_notification,\n    # ),\n]",
        "detail": "leapfrog-discussion-service.services.event_service.processors",
        "documentation": {}
    },
    {
        "label": "test_read_root",
        "kind": 2,
        "importPath": "leapfrog-discussion-service.tests.test_root",
        "description": "leapfrog-discussion-service.tests.test_root",
        "peekOfCode": "def test_read_root():\n    \"\"\"test root endpoint\"\"\"\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == \"DISCUSSION SERVICE\"",
        "detail": "leapfrog-discussion-service.tests.test_root",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "leapfrog-discussion-service.tests.test_root",
        "description": "leapfrog-discussion-service.tests.test_root",
        "peekOfCode": "client = TestClient(app)\ndef test_read_root():\n    \"\"\"test root endpoint\"\"\"\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == \"DISCUSSION SERVICE\"",
        "detail": "leapfrog-discussion-service.tests.test_root",
        "documentation": {}
    },
    {
        "label": "CustomParams",
        "kind": 6,
        "importPath": "leapfrog-discussion-service.utils.pagination",
        "description": "leapfrog-discussion-service.utils.pagination",
        "peekOfCode": "class CustomParams(Params):\n    \"\"\"Custom Pagination params\"\"\"\n    page: int = 1\n    size: int = 10\nasync def paginate_model(\n    query: FindMany[Document],\n    params: CustomParams,\n    fetch_links: bool = False,\n    full_load: bool = False,\n):",
        "detail": "leapfrog-discussion-service.utils.pagination",
        "documentation": {}
    },
    {
        "label": "token_saver",
        "kind": 2,
        "importPath": "leapfrog-discussion-service.utils.token",
        "description": "leapfrog-discussion-service.utils.token",
        "peekOfCode": "def token_saver(token):\n    \"\"\"Save token\"\"\"\n    with open(\"token.json\", \"w\", encoding=\"utf-8\") as file:\n        json.dump(token, file, indent=4)\ndef token_fetcher():\n    \"\"\"Fetch Token\"\"\"\n    try:\n        with open(\"token.json\", \"r\", encoding=\"utf-8\") as file:\n            token = json.load(file)\n            return token",
        "detail": "leapfrog-discussion-service.utils.token",
        "documentation": {}
    },
    {
        "label": "token_fetcher",
        "kind": 2,
        "importPath": "leapfrog-discussion-service.utils.token",
        "description": "leapfrog-discussion-service.utils.token",
        "peekOfCode": "def token_fetcher():\n    \"\"\"Fetch Token\"\"\"\n    try:\n        with open(\"token.json\", \"r\", encoding=\"utf-8\") as file:\n            token = json.load(file)\n            return token\n    # pylint: disable=W0718\n    except Exception:\n        return None",
        "detail": "leapfrog-discussion-service.utils.token",
        "documentation": {}
    },
    {
        "label": "read_root",
        "kind": 2,
        "importPath": "leapfrog-discussion-service.main",
        "description": "leapfrog-discussion-service.main",
        "peekOfCode": "def read_root():\n    \"\"\"Root Endpoint\"\"\"\n    return settings.API_TITLE\nif __name__ == \"__main__\":\n    uvicorn.run(\n        \"main:app\",\n        host=settings.API_HOST,\n        port=settings.API_PORT,\n        reload=True,\n    )",
        "detail": "leapfrog-discussion-service.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "leapfrog-discussion-service.main",
        "description": "leapfrog-discussion-service.main",
        "peekOfCode": "app = FastAPI(lifespan=lifespan, title=settings.API_TITLE)\n# Init IDP Connection\nidp.add_swagger_config(app)\n# Exceptions management\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(_: Request, exc: RequestValidationError):\n    \"\"\"Validation  exception handler\"\"\"\n    return JSONResponse(\n        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n        # Unprocessable Entity",
        "detail": "leapfrog-discussion-service.main",
        "documentation": {}
    },
    {
        "label": "notification_router",
        "kind": 5,
        "importPath": "leapfrog-notification-service.api.notification",
        "description": "leapfrog-notification-service.api.notification",
        "peekOfCode": "notification_router = APIRouter(prefix=\"/notifications\", tags=[\"Notifications\"])\nasync def get_notif_by_id(notification_id: UUID4, current_user: KeycloakUser):\n    \"\"\"Get notification By Id for A user\"\"\"\n    user = get_keycloak_user(current_user=current_user, fetch_user=True)\n    notification = await Notification.get(notification_id, fetch_links=True)\n    if notification is None or (notification.user_id != user.id):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND, detail=\"Notification not found\"\n        )\n    return notification",
        "detail": "leapfrog-notification-service.api.notification",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "leapfrog-notification-service.core.config",
        "description": "leapfrog-notification-service.core.config",
        "peekOfCode": "class Settings(BaseSettings):\n    \"\"\"Env Variables\"\"\"\n    # General\n    API_TITLE: str\n    API_HOST: str\n    API_PORT: int\n    # Keycloak\n    KEYCLOAK_SERVER: str\n    KEYCLOAK_CLIENT_ID: str\n    KEYCLOAK_CLIENT_SECRET: str",
        "detail": "leapfrog-notification-service.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "leapfrog-notification-service.core.config",
        "description": "leapfrog-notification-service.core.config",
        "peekOfCode": "settings = Settings()",
        "detail": "leapfrog-notification-service.core.config",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "leapfrog-notification-service.core.database",
        "description": "leapfrog-notification-service.core.database",
        "peekOfCode": "client = AsyncIOMotorClient(\n    f\"mongodb://{settings.MONGO_USER}:{settings.MONGO_PASSWORD}@{settings.MONGO_HOST}:{settings.MONGO_PORT}\",\n    uuidRepresentation=\"standard\",\n)\nasync def init_database():\n    \"\"\"Init database connection\"\"\"\n    await init_beanie(\n        database=client[settings.MONGO_DB],\n        document_models=[Notification],\n    )",
        "detail": "leapfrog-notification-service.core.database",
        "documentation": {}
    },
    {
        "label": "configure_logging",
        "kind": 2,
        "importPath": "leapfrog-notification-service.core.log",
        "description": "leapfrog-notification-service.core.log",
        "peekOfCode": "def configure_logging():\n    \"\"\"Configure logging for whole app\"\"\"\n    app_name = settings.API_TITLE.replace(\" \", \"-\").lower()\n    log_level = settings.LOG_LEVEL\n    log_file_pattern = f\"{app_name}_*.log\"  # Pattern for log files\n    log_dir = \"logs\"  # Directory to store logs\n    # Create the log directory if it doesn't exist\n    os.makedirs(log_dir, exist_ok=True)\n    # Find the highest existing log number to increment from\n    existing_logs = glob.glob(os.path.join(log_dir, log_file_pattern))",
        "detail": "leapfrog-notification-service.core.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "leapfrog-notification-service.core.log",
        "description": "leapfrog-notification-service.core.log",
        "peekOfCode": "logger = logging.getLogger(__name__)",
        "detail": "leapfrog-notification-service.core.log",
        "documentation": {}
    },
    {
        "label": "init_keycloak",
        "kind": 2,
        "importPath": "leapfrog-notification-service.core.security",
        "description": "leapfrog-notification-service.core.security",
        "peekOfCode": "def init_keycloak():\n    \"\"\"Init Keycloak instance for FastAPI\"\"\"\n    return FastAPIKeycloak(\n        server_url=settings.KEYCLOAK_SERVER,\n        client_id=settings.KEYCLOAK_CLIENT_ID,\n        client_secret=settings.KEYCLOAK_CLIENT_SECRET,\n        admin_client_secret=settings.KEYCLOAK_ADMIN_CLIENT_SECRET,\n        realm=settings.KEYCLOAK_REALM,\n        callback_uri=settings.KEYCLOAK_CALLBACK_URI,\n    )",
        "detail": "leapfrog-notification-service.core.security",
        "documentation": {}
    },
    {
        "label": "get_keycloak_user",
        "kind": 2,
        "importPath": "leapfrog-notification-service.core.security",
        "description": "leapfrog-notification-service.core.security",
        "peekOfCode": "def get_keycloak_user(\n    current_user: OIDCUser,\n    required_roles: List[str] = None,\n    fetch_user: bool = False,\n) -> KeycloakUser:\n    \"\"\"Retrieves a KeycloakUser from the current_user.\"\"\"\n    if required_roles:\n        msg = f\"One of thes roles ({', '.join(required_roles)}) is required to perform this action\"\n        if not any(role in current_user.roles for role in required_roles):\n            raise HTTPException(",
        "detail": "leapfrog-notification-service.core.security",
        "documentation": {}
    },
    {
        "label": "get_token",
        "kind": 2,
        "importPath": "leapfrog-notification-service.core.security",
        "description": "leapfrog-notification-service.core.security",
        "peekOfCode": "def get_token():\n    \"\"\"get Token\"\"\"\n    headers = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\n    data = {\n        \"client_id\": settings.KEYCLOAK_CLIENT_ID,\n        \"client_secret\": settings.KEYCLOAK_CLIENT_SECRET,\n        \"grant_type\": \"client_credentials\",\n    }\n    response = requests.post(\n        url=idp.token_uri, headers=headers, data=data, timeout=300",
        "detail": "leapfrog-notification-service.core.security",
        "documentation": {}
    },
    {
        "label": "get_session",
        "kind": 2,
        "importPath": "leapfrog-notification-service.core.security",
        "description": "leapfrog-notification-service.core.security",
        "peekOfCode": "def get_session():\n    \"\"\"Get Session\"\"\"\n    # fetching token\n    token = token_fetcher()\n    if token is None or not idp.token_is_valid(token=token):\n        token = get_token()\n        token_saver(token=token)\n    session = requests.Session()\n    # Configuration de la session si nécessaire (headers, etc.)\n    session.headers.setdefault(\"Authorization\", f\"Bearer {token}\")",
        "detail": "leapfrog-notification-service.core.security",
        "documentation": {}
    },
    {
        "label": "idp",
        "kind": 5,
        "importPath": "leapfrog-notification-service.core.security",
        "description": "leapfrog-notification-service.core.security",
        "peekOfCode": "idp = init_keycloak()\ndef get_keycloak_user(\n    current_user: OIDCUser,\n    required_roles: List[str] = None,\n    fetch_user: bool = False,\n) -> KeycloakUser:\n    \"\"\"Retrieves a KeycloakUser from the current_user.\"\"\"\n    if required_roles:\n        msg = f\"One of thes roles ({', '.join(required_roles)}) is required to perform this action\"\n        if not any(role in current_user.roles for role in required_roles):",
        "detail": "leapfrog-notification-service.core.security",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "leapfrog-notification-service.models.notification",
        "description": "leapfrog-notification-service.models.notification",
        "peekOfCode": "class Notification(Document, NotificationBase):\n    \"\"\"Notification Db Model\"\"\"\n    id: UUID4 = Field(default_factory=uuid4, alias=\"_id\")\n    created_at: datetime = Field(default_factory=datetime.now)\n    def __repr__(self) -> str:\n        return f\"<Notification {self.notif_type}: {self.title}>\"\n    def __str__(self) -> str:\n        return f\"{self.notif_type}: {self.title}\"\n    @classmethod\n    def get_user_id(cls, user_id: str) -> Optional[List[\"Notification\"]]:",
        "detail": "leapfrog-notification-service.models.notification",
        "documentation": {}
    },
    {
        "label": "NotificationType",
        "kind": 6,
        "importPath": "leapfrog-notification-service.schemas.notification",
        "description": "leapfrog-notification-service.schemas.notification",
        "peekOfCode": "class NotificationType(Enum):\n    \"\"\"Notification Type\"\"\"\n    ALERT = \"Alert\"\n    INFO = \"Info\"\n    ADS = \"Ads\"\nclass NotificationBase(BaseModel):\n    \"\"\"Notification base model\"\"\"\n    notif_type: NotificationType\n    title: str\n    content: str",
        "detail": "leapfrog-notification-service.schemas.notification",
        "documentation": {}
    },
    {
        "label": "NotificationBase",
        "kind": 6,
        "importPath": "leapfrog-notification-service.schemas.notification",
        "description": "leapfrog-notification-service.schemas.notification",
        "peekOfCode": "class NotificationBase(BaseModel):\n    \"\"\"Notification base model\"\"\"\n    notif_type: NotificationType\n    title: str\n    content: str\nclass NotificationCreate(BaseModel):\n    \"\"\"Notification creation schema\"\"\"\n    user_ids: list[str]\n    content: NotificationBase\nclass Notification(NotificationBase):",
        "detail": "leapfrog-notification-service.schemas.notification",
        "documentation": {}
    },
    {
        "label": "NotificationCreate",
        "kind": 6,
        "importPath": "leapfrog-notification-service.schemas.notification",
        "description": "leapfrog-notification-service.schemas.notification",
        "peekOfCode": "class NotificationCreate(BaseModel):\n    \"\"\"Notification creation schema\"\"\"\n    user_ids: list[str]\n    content: NotificationBase\nclass Notification(NotificationBase):\n    \"\"\"Notification schema\"\"\"\n    id: UUID4\n    user_id: str\n    read: bool = False\n    created_at: datetime",
        "detail": "leapfrog-notification-service.schemas.notification",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "leapfrog-notification-service.schemas.notification",
        "description": "leapfrog-notification-service.schemas.notification",
        "peekOfCode": "class Notification(NotificationBase):\n    \"\"\"Notification schema\"\"\"\n    id: UUID4\n    user_id: str\n    read: bool = False\n    created_at: datetime",
        "detail": "leapfrog-notification-service.schemas.notification",
        "documentation": {}
    },
    {
        "label": "message_processing_decorator",
        "kind": 2,
        "importPath": "leapfrog-notification-service.services.event_service.consumer",
        "description": "leapfrog-notification-service.services.event_service.consumer",
        "peekOfCode": "def message_processing_decorator(func):\n    \"\"\"Message processor decorator\"\"\"\n    async def wrapper(message: aio_pika.abc.AbstractIncomingMessage):\n        try:\n            msg = message.body.decode()\n            data = json.loads(msg)\n            await func(data)\n            await message.ack()\n        except (\n            ValidationError,",
        "detail": "leapfrog-notification-service.services.event_service.consumer",
        "documentation": {}
    },
    {
        "label": "MessageProcessor",
        "kind": 6,
        "importPath": "leapfrog-notification-service.services.event_service.processors",
        "description": "leapfrog-notification-service.services.event_service.processors",
        "peekOfCode": "class MessageProcessor:\n    \"\"\"Message Processor Class\"\"\"\n    queue_name: str\n    processor: Callable\n    async def run(self):\n        \"\"\"Run Message Processor\"\"\"\n        while True:\n            try:\n                await consume(self.queue_name, self.processor)\n            except AMQPConnectionError as error:",
        "detail": "leapfrog-notification-service.services.event_service.processors",
        "documentation": {}
    },
    {
        "label": "processors",
        "kind": 5,
        "importPath": "leapfrog-notification-service.services.event_service.processors",
        "description": "leapfrog-notification-service.services.event_service.processors",
        "peekOfCode": "processors = [\n    MessageProcessor(\n        queue_name=settings.QUEUE_NOTIFICATION_CREATE,\n        processor=perform_create_notification,\n    ),\n]",
        "detail": "leapfrog-notification-service.services.event_service.processors",
        "documentation": {}
    },
    {
        "label": "conf",
        "kind": 5,
        "importPath": "leapfrog-notification-service.services.email",
        "description": "leapfrog-notification-service.services.email",
        "peekOfCode": "conf = ConnectionConfig(\n    MAIL_USERNAME=settings.EMAIL_HOST_USER,\n    MAIL_PASSWORD=settings.EMAIL_HOST_PASSWORD,\n    MAIL_FROM=settings.DEFAULT_FROM_EMAIL,\n    MAIL_PORT=settings.EMAIL_PORT,\n    MAIL_SERVER=settings.EMAIL_HOST,\n    MAIL_STARTTLS=settings.EMAIL_USE_TLS,\n    MAIL_SSL_TLS=settings.EMAIL_USE_SSL,\n    USE_CREDENTIALS=settings.EMAIL_USE_CREDENTIALS,\n    TEMPLATE_FOLDER=Path(__file__).parent / \"email_templates\",",
        "detail": "leapfrog-notification-service.services.email",
        "documentation": {}
    },
    {
        "label": "test_read_root",
        "kind": 2,
        "importPath": "leapfrog-notification-service.tests.test_root",
        "description": "leapfrog-notification-service.tests.test_root",
        "peekOfCode": "def test_read_root():\n    \"\"\"test root endpoint\"\"\"\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == \"NOTIFICATION SERVICE\"",
        "detail": "leapfrog-notification-service.tests.test_root",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "leapfrog-notification-service.tests.test_root",
        "description": "leapfrog-notification-service.tests.test_root",
        "peekOfCode": "client = TestClient(app)\ndef test_read_root():\n    \"\"\"test root endpoint\"\"\"\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == \"NOTIFICATION SERVICE\"",
        "detail": "leapfrog-notification-service.tests.test_root",
        "documentation": {}
    },
    {
        "label": "CustomParams",
        "kind": 6,
        "importPath": "leapfrog-notification-service.utils.pagination",
        "description": "leapfrog-notification-service.utils.pagination",
        "peekOfCode": "class CustomParams(Params):\n    \"\"\"Custom Pagination params\"\"\"\n    page: int = 1\n    size: int = 10\nasync def paginate_model(\n    query: FindMany[Document],\n    params: CustomParams,\n    fetch_links: bool = False,\n    full_load: bool = False,\n):",
        "detail": "leapfrog-notification-service.utils.pagination",
        "documentation": {}
    },
    {
        "label": "token_saver",
        "kind": 2,
        "importPath": "leapfrog-notification-service.utils.token",
        "description": "leapfrog-notification-service.utils.token",
        "peekOfCode": "def token_saver(token):\n    \"\"\"Save token\"\"\"\n    with open(\"token.json\", \"w\", encoding=\"utf-8\") as file:\n        json.dump(token, file, indent=4)\ndef token_fetcher():\n    \"\"\"Fetch Token\"\"\"\n    try:\n        with open(\"token.json\", \"r\", encoding=\"utf-8\") as file:\n            token = json.load(file)\n            return token",
        "detail": "leapfrog-notification-service.utils.token",
        "documentation": {}
    },
    {
        "label": "token_fetcher",
        "kind": 2,
        "importPath": "leapfrog-notification-service.utils.token",
        "description": "leapfrog-notification-service.utils.token",
        "peekOfCode": "def token_fetcher():\n    \"\"\"Fetch Token\"\"\"\n    try:\n        with open(\"token.json\", \"r\", encoding=\"utf-8\") as file:\n            token = json.load(file)\n            return token\n    # pylint: disable=W0718\n    except Exception:\n        return None",
        "detail": "leapfrog-notification-service.utils.token",
        "documentation": {}
    },
    {
        "label": "read_root",
        "kind": 2,
        "importPath": "leapfrog-notification-service.main",
        "description": "leapfrog-notification-service.main",
        "peekOfCode": "def read_root():\n    \"\"\"Root Endpoint\"\"\"\n    return settings.API_TITLE\nif __name__ == \"__main__\":\n    uvicorn.run(\n        \"main:app\",\n        host=settings.API_HOST,\n        port=settings.API_PORT,\n        reload=True,\n    )",
        "detail": "leapfrog-notification-service.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "leapfrog-notification-service.main",
        "description": "leapfrog-notification-service.main",
        "peekOfCode": "app = FastAPI(lifespan=lifespan, title=settings.API_TITLE)\n# Init IDP Connection\nidp.add_swagger_config(app)\n# Exceptions management\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(_: Request, exc: RequestValidationError):\n    \"\"\"Validation  exception handler\"\"\"\n    return JSONResponse(\n        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n        # Unprocessable Entity",
        "detail": "leapfrog-notification-service.main",
        "documentation": {}
    },
    {
        "label": "payment_method_router",
        "kind": 5,
        "importPath": "leapfrog-subscription-service.api.payment_method",
        "description": "leapfrog-subscription-service.api.payment_method",
        "peekOfCode": "payment_method_router = APIRouter(prefix=\"/payment-methods\", tags=[\"Payment Methods\"])\n@payment_method_router.get(\"/\", response_model=Page[PaymentMethodOut])\nasync def read_payment_methods(\n    params: CustomParams = Depends(),\n    full_load: bool = False,\n    current_user: OIDCUser = Depends(idp.get_current_user()),\n):\n    \"\"\"read payment methods\"\"\"\n    query = PaymentMethod.find_all()\n    if Roles.STAFF not in current_user.roles:",
        "detail": "leapfrog-subscription-service.api.payment_method",
        "documentation": {}
    },
    {
        "label": "plan_router",
        "kind": 5,
        "importPath": "leapfrog-subscription-service.api.plan",
        "description": "leapfrog-subscription-service.api.plan",
        "peekOfCode": "plan_router = APIRouter(prefix=\"/plans\", tags=[\"Plan/Offers\"])\n@plan_router.get(\"/\", response_model=Page[PlanOut])\nasync def read_plans(\n    params: CustomParams = Depends(),\n    full_load: bool = False,\n):\n    \"\"\"read plans\"\"\"\n    query = Plan.find_all()\n    return await paginate_model(\n        query=query, params=params, full_load=full_load, fetch_links=True",
        "detail": "leapfrog-subscription-service.api.plan",
        "documentation": {}
    },
    {
        "label": "subscription_router",
        "kind": 5,
        "importPath": "leapfrog-subscription-service.api.subscription",
        "description": "leapfrog-subscription-service.api.subscription",
        "peekOfCode": "subscription_router = APIRouter(prefix=\"/subscriptions\", tags=[\"Subscriptions\"])\n@subscription_router.get(\"/\", response_model=Page[SubscriptionOut])\nasync def read_subscriptions(\n    params: CustomParams = Depends(),\n    full_load: bool = False,\n    _: OIDCUser = Depends(idp.get_current_user(required_roles=[Roles.STAFF])),\n):\n    \"\"\"read subscriptions\"\"\"\n    query = Subscription.find_all()\n    return await paginate_model(",
        "detail": "leapfrog-subscription-service.api.subscription",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.core.config",
        "description": "leapfrog-subscription-service.core.config",
        "peekOfCode": "class Settings(BaseSettings):\n    \"\"\"Env Variables\"\"\"\n    # General\n    API_TITLE: str\n    API_HOST: str\n    API_PORT: int\n    # Keycloak\n    KEYCLOAK_SERVER: str\n    KEYCLOAK_CLIENT_ID: str\n    KEYCLOAK_CLIENT_SECRET: str",
        "detail": "leapfrog-subscription-service.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "leapfrog-subscription-service.core.config",
        "description": "leapfrog-subscription-service.core.config",
        "peekOfCode": "settings = Settings()",
        "detail": "leapfrog-subscription-service.core.config",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "leapfrog-subscription-service.core.database",
        "description": "leapfrog-subscription-service.core.database",
        "peekOfCode": "client = AsyncIOMotorClient(\n    f\"mongodb://{settings.MONGO_USER}:{settings.MONGO_PASSWORD}@{settings.MONGO_HOST}:{settings.MONGO_PORT}\",\n    uuidRepresentation=\"standard\",\n)\nasync def init_database():\n    \"\"\"Init database connection\"\"\"\n    await init_beanie(\n        database=client[settings.MONGO_DB],\n        document_models=[PaymentMethod, Plan, Payment, Subscription, PaymentIntent],\n    )",
        "detail": "leapfrog-subscription-service.core.database",
        "documentation": {}
    },
    {
        "label": "configure_logging",
        "kind": 2,
        "importPath": "leapfrog-subscription-service.core.log",
        "description": "leapfrog-subscription-service.core.log",
        "peekOfCode": "def configure_logging():\n    \"\"\"Configure logging for whole app\"\"\"\n    app_name = settings.API_TITLE.replace(\" \", \"-\").lower()\n    log_level = settings.LOG_LEVEL\n    log_file_pattern = f\"{app_name}_*.log\"  # Pattern for log files\n    log_dir = \"logs\"  # Directory to store logs\n    # Create the log directory if it doesn't exist\n    os.makedirs(log_dir, exist_ok=True)\n    # Find the highest existing log number to increment from\n    existing_logs = glob.glob(os.path.join(log_dir, log_file_pattern))",
        "detail": "leapfrog-subscription-service.core.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "leapfrog-subscription-service.core.log",
        "description": "leapfrog-subscription-service.core.log",
        "peekOfCode": "logger = logging.getLogger(__name__)",
        "detail": "leapfrog-subscription-service.core.log",
        "documentation": {}
    },
    {
        "label": "init_keycloak",
        "kind": 2,
        "importPath": "leapfrog-subscription-service.core.security",
        "description": "leapfrog-subscription-service.core.security",
        "peekOfCode": "def init_keycloak():\n    \"\"\"Init Keycloak instance for FastAPI\"\"\"\n    return FastAPIKeycloak(\n        server_url=settings.KEYCLOAK_SERVER,\n        client_id=settings.KEYCLOAK_CLIENT_ID,\n        client_secret=settings.KEYCLOAK_CLIENT_SECRET,\n        admin_client_secret=settings.KEYCLOAK_ADMIN_CLIENT_SECRET,\n        realm=settings.KEYCLOAK_REALM,\n        callback_uri=settings.KEYCLOAK_CALLBACK_URI,\n    )",
        "detail": "leapfrog-subscription-service.core.security",
        "documentation": {}
    },
    {
        "label": "get_keycloak_user",
        "kind": 2,
        "importPath": "leapfrog-subscription-service.core.security",
        "description": "leapfrog-subscription-service.core.security",
        "peekOfCode": "def get_keycloak_user(\n    current_user: OIDCUser,\n    required_roles: List[str] = None,\n    fetch_user: bool = False,\n) -> KeycloakUser:\n    \"\"\"Retrieves a KeycloakUser from the current_user.\"\"\"\n    if required_roles:\n        msg = f\"One of thes roles ({', '.join(required_roles)}) is required to perform this action\"\n        if not any(role in current_user.roles for role in required_roles):\n            raise HTTPException(",
        "detail": "leapfrog-subscription-service.core.security",
        "documentation": {}
    },
    {
        "label": "get_token",
        "kind": 2,
        "importPath": "leapfrog-subscription-service.core.security",
        "description": "leapfrog-subscription-service.core.security",
        "peekOfCode": "def get_token():\n    \"\"\"get Token\"\"\"\n    headers = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\n    data = {\n        \"client_id\": settings.KEYCLOAK_CLIENT_ID,\n        \"client_secret\": settings.KEYCLOAK_CLIENT_SECRET,\n        \"grant_type\": \"client_credentials\",\n    }\n    response = requests.post(\n        url=idp.token_uri, headers=headers, data=data, timeout=300",
        "detail": "leapfrog-subscription-service.core.security",
        "documentation": {}
    },
    {
        "label": "get_session",
        "kind": 2,
        "importPath": "leapfrog-subscription-service.core.security",
        "description": "leapfrog-subscription-service.core.security",
        "peekOfCode": "def get_session():\n    \"\"\"Get Session\"\"\"\n    # fetching token\n    token = token_fetcher()\n    if token is None or not idp.token_is_valid(token=token):\n        token = get_token()\n        token_saver(token=token)\n    session = requests.Session()\n    # Configuration de la session si nécessaire (headers, etc.)\n    session.headers.setdefault(\"Authorization\", f\"Bearer {token}\")",
        "detail": "leapfrog-subscription-service.core.security",
        "documentation": {}
    },
    {
        "label": "idp",
        "kind": 5,
        "importPath": "leapfrog-subscription-service.core.security",
        "description": "leapfrog-subscription-service.core.security",
        "peekOfCode": "idp = init_keycloak()\ndef get_keycloak_user(\n    current_user: OIDCUser,\n    required_roles: List[str] = None,\n    fetch_user: bool = False,\n) -> KeycloakUser:\n    \"\"\"Retrieves a KeycloakUser from the current_user.\"\"\"\n    if required_roles:\n        msg = f\"One of thes roles ({', '.join(required_roles)}) is required to perform this action\"\n        if not any(role in current_user.roles for role in required_roles):",
        "detail": "leapfrog-subscription-service.core.security",
        "documentation": {}
    },
    {
        "label": "DocumentBase",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.models.document",
        "description": "leapfrog-subscription-service.models.document",
        "peekOfCode": "class DocumentBase(Document):\n    \"\"\"Document Base Db model\"\"\"\n    id: UUID4 = Field(default_factory=uuid4, alias=\"_id\")\n    created_at: datetime = Field(default_factory=datetime.now)\n    updated_at: datetime = Field(default_factory=datetime.now)\n    async def save(self, *args, **kwargs):\n        self.updated_at = datetime.now()\n        await super().save(*args, **kwargs)",
        "detail": "leapfrog-subscription-service.models.document",
        "documentation": {}
    },
    {
        "label": "Payment",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.models.payment",
        "description": "leapfrog-subscription-service.models.payment",
        "peekOfCode": "class Payment(DocumentBase, PaymentBase):\n    \"\"\"Payment Db Model\"\"\"\n    def __repr__(self) -> str:\n        return f\"<Payment subscription={self.subscription_id}-amount={self.amount}>\"\n    def __str__(self) -> str:\n        return f\"subscription={self.subscription_id}-amount={self.amount}\"\n    class Settings:\n        \"\"\"Db Setting\"\"\"\n        name = \"payment\"",
        "detail": "leapfrog-subscription-service.models.payment",
        "documentation": {}
    },
    {
        "label": "PaymentMethod",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.models.payment_method",
        "description": "leapfrog-subscription-service.models.payment_method",
        "peekOfCode": "class PaymentMethod(DocumentBase, PaymentMethodBase):\n    \"\"\"PaymentMethod Db Model\"\"\"\n    def __repr__(self) -> str:\n        return f\"<PaymentMethod User={self.user_id} -  type={self.payment_type.value}>\"\n    def __str__(self) -> str:\n        return f\"User={self.user_id} -  type={self.payment_type.value}\"\n    class Settings:\n        \"\"\"Db Setting\"\"\"\n        name = \"payment_method\"",
        "detail": "leapfrog-subscription-service.models.payment_method",
        "documentation": {}
    },
    {
        "label": "Plan",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.models.plan",
        "description": "leapfrog-subscription-service.models.plan",
        "peekOfCode": "class Plan(DocumentBase, PlanBase):\n    \"\"\"Plan Db Model\"\"\"\n    name: Annotated[str, Indexed(unique=True)]\n    def __repr__(self) -> str:\n        return f\"<Plan name={self.name}, Billing={self.billing_cycle}, Price={self.price} USD>\"\n    def __str__(self) -> str:\n        return f\"name={self.name}, Billing={self.billing_cycle}, Price={self.price} USD\"\n    class Settings:\n        \"\"\"Db Setting\"\"\"\n        name = \"plan\"",
        "detail": "leapfrog-subscription-service.models.plan",
        "documentation": {}
    },
    {
        "label": "Subscription",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.models.subscription",
        "description": "leapfrog-subscription-service.models.subscription",
        "peekOfCode": "class Subscription(DocumentBase, SubscriptionBase):\n    \"\"\"Subscription Db Model\"\"\"\n    user_id: Annotated[str, Indexed(unique=True)]\n    plan: Link[Plan]\n    payments: List[Link[Payment]] = []\n    start_date: datetime = Field(default_factory=datetime.now)\n    def __repr__(self) -> str:\n        return f\"<Subscription User={self.user_id}: Plan={self.plan.id}>\"\n    def __str__(self) -> str:\n        return f\"User={self.user_id}: Plan={self.plan.id}\"",
        "detail": "leapfrog-subscription-service.models.subscription",
        "documentation": {}
    },
    {
        "label": "PaymentIntent",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.models.subscription",
        "description": "leapfrog-subscription-service.models.subscription",
        "peekOfCode": "class PaymentIntent(DocumentBase, PaymentIntentBase):\n    \"\"\"Payment intent Db Model\"\"\"\n    def __repr__(self) -> str:\n        return f\"<PaymentIntent User={self.user_id}: Plan={self.plan_id}>\"\n    def __str__(self) -> str:\n        return f\"User={self.user_id}: Plan={self.plan_id}\"\n    @classmethod\n    def get_by_user_id(cls, user_id: str) -> Optional[List[\"Subscription\"]]:\n        \"\"\"Get PaymentIntent by user id.\"\"\"\n        return cls.find_one(cls.user_id == user_id)",
        "detail": "leapfrog-subscription-service.models.subscription",
        "documentation": {}
    },
    {
        "label": "NotificationType",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.notification",
        "description": "leapfrog-subscription-service.schemas.notification",
        "peekOfCode": "class NotificationType(Enum):\n    \"\"\"Notification Type\"\"\"\n    ALERT = \"Alert\"\n    INFO = \"Info\"\n    ADS = \"Ads\"\nclass NotificationBase(BaseModel):\n    \"\"\"Notification base model\"\"\"\n    notif_type: NotificationType\n    title: str\n    content: str",
        "detail": "leapfrog-subscription-service.schemas.notification",
        "documentation": {}
    },
    {
        "label": "NotificationBase",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.notification",
        "description": "leapfrog-subscription-service.schemas.notification",
        "peekOfCode": "class NotificationBase(BaseModel):\n    \"\"\"Notification base model\"\"\"\n    notif_type: NotificationType\n    title: str\n    content: str\nclass NotificationCreate(BaseModel):\n    \"\"\"Notification creation schema\"\"\"\n    user_ids: list[str]\n    content: NotificationBase\nclass Notification(NotificationBase):",
        "detail": "leapfrog-subscription-service.schemas.notification",
        "documentation": {}
    },
    {
        "label": "NotificationCreate",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.notification",
        "description": "leapfrog-subscription-service.schemas.notification",
        "peekOfCode": "class NotificationCreate(BaseModel):\n    \"\"\"Notification creation schema\"\"\"\n    user_ids: list[str]\n    content: NotificationBase\nclass Notification(NotificationBase):\n    \"\"\"Notification schema\"\"\"\n    id: UUID4\n    user_id: str\n    read: bool = False\n    created_at: datetime",
        "detail": "leapfrog-subscription-service.schemas.notification",
        "documentation": {}
    },
    {
        "label": "Notification",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.notification",
        "description": "leapfrog-subscription-service.schemas.notification",
        "peekOfCode": "class Notification(NotificationBase):\n    \"\"\"Notification schema\"\"\"\n    id: UUID4\n    user_id: str\n    read: bool = False\n    created_at: datetime",
        "detail": "leapfrog-subscription-service.schemas.notification",
        "documentation": {}
    },
    {
        "label": "PaymentStatus",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.payment",
        "description": "leapfrog-subscription-service.schemas.payment",
        "peekOfCode": "class PaymentStatus(Enum):\n    \"\"\"Payment status enumerations\"\"\"\n    SUCCESS = \"Success\"\n    CANCELLED = \"Cancelled\"\n    FAILED = \"Failed\"\nclass Payment(BaseModel):\n    \"\"\"Payment model\"\"\"\n    id: UUID4\n    subscription_id: UUID4\n    amount: float",
        "detail": "leapfrog-subscription-service.schemas.payment",
        "documentation": {}
    },
    {
        "label": "Payment",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.payment",
        "description": "leapfrog-subscription-service.schemas.payment",
        "peekOfCode": "class Payment(BaseModel):\n    \"\"\"Payment model\"\"\"\n    id: UUID4\n    subscription_id: UUID4\n    amount: float\n    currency: str\n    payment_method_id: UUID4\n    payment_date: datetime\n    status: PaymentStatus\n    transaction_id: str",
        "detail": "leapfrog-subscription-service.schemas.payment",
        "documentation": {}
    },
    {
        "label": "PaymentMethodType",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.payment_method",
        "description": "leapfrog-subscription-service.schemas.payment_method",
        "peekOfCode": "class PaymentMethodType(Enum):\n    \"\"\"Payment method type enumeration\"\"\"\n    PAYPAL = \"Paypal\"\n    OTHER = \"Other\"\nclass PayPal(BaseModel):\n    \"\"\"Paypal model\"\"\"\n    paypal_email: EmailStr\nclass Other(BaseModel):\n    \"\"\"Other model\"\"\"\nclass PaymentMethodBase(BaseModel):",
        "detail": "leapfrog-subscription-service.schemas.payment_method",
        "documentation": {}
    },
    {
        "label": "PayPal",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.payment_method",
        "description": "leapfrog-subscription-service.schemas.payment_method",
        "peekOfCode": "class PayPal(BaseModel):\n    \"\"\"Paypal model\"\"\"\n    paypal_email: EmailStr\nclass Other(BaseModel):\n    \"\"\"Other model\"\"\"\nclass PaymentMethodBase(BaseModel):\n    \"\"\"Payment method base model\"\"\"\n    is_default: bool\n    payment_type: PaymentMethodType = PaymentMethodType.PAYPAL\n    payment_info: PayPal | Other",
        "detail": "leapfrog-subscription-service.schemas.payment_method",
        "documentation": {}
    },
    {
        "label": "Other",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.payment_method",
        "description": "leapfrog-subscription-service.schemas.payment_method",
        "peekOfCode": "class Other(BaseModel):\n    \"\"\"Other model\"\"\"\nclass PaymentMethodBase(BaseModel):\n    \"\"\"Payment method base model\"\"\"\n    is_default: bool\n    payment_type: PaymentMethodType = PaymentMethodType.PAYPAL\n    payment_info: PayPal | Other\nclass PaymentMethodCreate(PaymentMethodBase):\n    \"\"\"Payment method create model\"\"\"\nclass PaymentMethodUpdate(BaseModel):",
        "detail": "leapfrog-subscription-service.schemas.payment_method",
        "documentation": {}
    },
    {
        "label": "PaymentMethodBase",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.payment_method",
        "description": "leapfrog-subscription-service.schemas.payment_method",
        "peekOfCode": "class PaymentMethodBase(BaseModel):\n    \"\"\"Payment method base model\"\"\"\n    is_default: bool\n    payment_type: PaymentMethodType = PaymentMethodType.PAYPAL\n    payment_info: PayPal | Other\nclass PaymentMethodCreate(PaymentMethodBase):\n    \"\"\"Payment method create model\"\"\"\nclass PaymentMethodUpdate(BaseModel):\n    \"\"\"Payment method update model\"\"\"\n    payment_info: PayPal | Other | None = None",
        "detail": "leapfrog-subscription-service.schemas.payment_method",
        "documentation": {}
    },
    {
        "label": "PaymentMethodCreate",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.payment_method",
        "description": "leapfrog-subscription-service.schemas.payment_method",
        "peekOfCode": "class PaymentMethodCreate(PaymentMethodBase):\n    \"\"\"Payment method create model\"\"\"\nclass PaymentMethodUpdate(BaseModel):\n    \"\"\"Payment method update model\"\"\"\n    payment_info: PayPal | Other | None = None\n    is_default: bool | None = None\nclass PaymentMethod(PaymentMethodBase):\n    \"\"\"Payment method schema\"\"\"\n    id: UUID4\n    user_id: UUID4",
        "detail": "leapfrog-subscription-service.schemas.payment_method",
        "documentation": {}
    },
    {
        "label": "PaymentMethodUpdate",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.payment_method",
        "description": "leapfrog-subscription-service.schemas.payment_method",
        "peekOfCode": "class PaymentMethodUpdate(BaseModel):\n    \"\"\"Payment method update model\"\"\"\n    payment_info: PayPal | Other | None = None\n    is_default: bool | None = None\nclass PaymentMethod(PaymentMethodBase):\n    \"\"\"Payment method schema\"\"\"\n    id: UUID4\n    user_id: UUID4\n    created_at: datetime\n    updated_at: datetime",
        "detail": "leapfrog-subscription-service.schemas.payment_method",
        "documentation": {}
    },
    {
        "label": "PaymentMethod",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.payment_method",
        "description": "leapfrog-subscription-service.schemas.payment_method",
        "peekOfCode": "class PaymentMethod(PaymentMethodBase):\n    \"\"\"Payment method schema\"\"\"\n    id: UUID4\n    user_id: UUID4\n    created_at: datetime\n    updated_at: datetime",
        "detail": "leapfrog-subscription-service.schemas.payment_method",
        "documentation": {}
    },
    {
        "label": "BillingCycle",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.plan",
        "description": "leapfrog-subscription-service.schemas.plan",
        "peekOfCode": "class BillingCycle(Enum):\n    \"\"\"Billing cycle enumerations\"\"\"\n    MONTHLY = \"monthly\"\n    ANNUALLY = \"annually\"\nclass PlanBase(BaseModel):\n    \"\"\"Plan Base model\"\"\"\n    name: str\n    description: str\n    price: float\n    billing_cycle: BillingCycle",
        "detail": "leapfrog-subscription-service.schemas.plan",
        "documentation": {}
    },
    {
        "label": "PlanBase",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.plan",
        "description": "leapfrog-subscription-service.schemas.plan",
        "peekOfCode": "class PlanBase(BaseModel):\n    \"\"\"Plan Base model\"\"\"\n    name: str\n    description: str\n    price: float\n    billing_cycle: BillingCycle\n    features: list[str]\n    active: bool\n    is_trial: bool\nclass PlanCreate(PlanBase):",
        "detail": "leapfrog-subscription-service.schemas.plan",
        "documentation": {}
    },
    {
        "label": "PlanCreate",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.plan",
        "description": "leapfrog-subscription-service.schemas.plan",
        "peekOfCode": "class PlanCreate(PlanBase):\n    \"\"\"Plan creattion model\"\"\"\nclass PlanUpdate(BaseModel):\n    \"\"\"Plan update model\"\"\"\n    name: Optional[str] = None\n    description: Optional[str] = None\n    price: Optional[float] = None\n    billing_cycle: Optional[BillingCycle] = None\n    features: list[Optional[str]] = None\n    active: Optional[bool] = None",
        "detail": "leapfrog-subscription-service.schemas.plan",
        "documentation": {}
    },
    {
        "label": "PlanUpdate",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.plan",
        "description": "leapfrog-subscription-service.schemas.plan",
        "peekOfCode": "class PlanUpdate(BaseModel):\n    \"\"\"Plan update model\"\"\"\n    name: Optional[str] = None\n    description: Optional[str] = None\n    price: Optional[float] = None\n    billing_cycle: Optional[BillingCycle] = None\n    features: list[Optional[str]] = None\n    active: Optional[bool] = None\nclass Plan(PlanBase):\n    \"\"\"Subscription Plan Schema\"\"\"",
        "detail": "leapfrog-subscription-service.schemas.plan",
        "documentation": {}
    },
    {
        "label": "Plan",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.plan",
        "description": "leapfrog-subscription-service.schemas.plan",
        "peekOfCode": "class Plan(PlanBase):\n    \"\"\"Subscription Plan Schema\"\"\"\n    id: UUID4\n    created_at: datetime\n    updated_at: datetime",
        "detail": "leapfrog-subscription-service.schemas.plan",
        "documentation": {}
    },
    {
        "label": "Roles",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.roles",
        "description": "leapfrog-subscription-service.schemas.roles",
        "peekOfCode": "class Roles(str, Enum):\n    \"\"\"User roles enumarations\"\"\"\n    STUDENT = \"Student\"\n    INSTRUCTOR = \"Instructor\"\n    ADMIN = \"Administrator\"\n    STAFF = \"Staff\"",
        "detail": "leapfrog-subscription-service.schemas.roles",
        "documentation": {}
    },
    {
        "label": "SubscriptionStatus",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.subscription",
        "description": "leapfrog-subscription-service.schemas.subscription",
        "peekOfCode": "class SubscriptionStatus(Enum):\n    \"\"\"Subscription statuses\"\"\"\n    ACTIVE = \"Active\"\n    CANCELLED = \"Cancelled\"\n    SUSPENDED = \"Suspended\"\nclass SubscriptionBase(BaseModel):\n    \"\"\"Base Subscription Model\"\"\"\n    user_id: Optional[str] = None\nclass SubscriptionCreate(SubscriptionBase):\n    \"\"\"Model for creating a new subscription\"\"\"",
        "detail": "leapfrog-subscription-service.schemas.subscription",
        "documentation": {}
    },
    {
        "label": "SubscriptionBase",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.subscription",
        "description": "leapfrog-subscription-service.schemas.subscription",
        "peekOfCode": "class SubscriptionBase(BaseModel):\n    \"\"\"Base Subscription Model\"\"\"\n    user_id: Optional[str] = None\nclass SubscriptionCreate(SubscriptionBase):\n    \"\"\"Model for creating a new subscription\"\"\"\n    plan_id: UUID4\nclass SubscriptionUpdate(BaseModel):\n    \"\"\"Suscription update model\"\"\"\n    status: Optional[SubscriptionStatus] = None\n    plan_id: Optional[UUID4] = None",
        "detail": "leapfrog-subscription-service.schemas.subscription",
        "documentation": {}
    },
    {
        "label": "SubscriptionCreate",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.subscription",
        "description": "leapfrog-subscription-service.schemas.subscription",
        "peekOfCode": "class SubscriptionCreate(SubscriptionBase):\n    \"\"\"Model for creating a new subscription\"\"\"\n    plan_id: UUID4\nclass SubscriptionUpdate(BaseModel):\n    \"\"\"Suscription update model\"\"\"\n    status: Optional[SubscriptionStatus] = None\n    plan_id: Optional[UUID4] = None\n    cancel_resaon: Optional[str] = None\nclass Subscription(SubscriptionBase):\n    \"\"\"Full Subscription Schema\"\"\"",
        "detail": "leapfrog-subscription-service.schemas.subscription",
        "documentation": {}
    },
    {
        "label": "SubscriptionUpdate",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.subscription",
        "description": "leapfrog-subscription-service.schemas.subscription",
        "peekOfCode": "class SubscriptionUpdate(BaseModel):\n    \"\"\"Suscription update model\"\"\"\n    status: Optional[SubscriptionStatus] = None\n    plan_id: Optional[UUID4] = None\n    cancel_resaon: Optional[str] = None\nclass Subscription(SubscriptionBase):\n    \"\"\"Full Subscription Schema\"\"\"\n    id: UUID4\n    user_id: str\n    plan: Plan",
        "detail": "leapfrog-subscription-service.schemas.subscription",
        "documentation": {}
    },
    {
        "label": "Subscription",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.subscription",
        "description": "leapfrog-subscription-service.schemas.subscription",
        "peekOfCode": "class Subscription(SubscriptionBase):\n    \"\"\"Full Subscription Schema\"\"\"\n    id: UUID4\n    user_id: str\n    plan: Plan\n    start_date: datetime\n    end_date: datetime = None\n    status: SubscriptionStatus = SubscriptionStatus.SUSPENDED\n    payments: List[Payment]\n    renewal_date: Optional[datetime] = None",
        "detail": "leapfrog-subscription-service.schemas.subscription",
        "documentation": {}
    },
    {
        "label": "ActionType",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.subscription",
        "description": "leapfrog-subscription-service.schemas.subscription",
        "peekOfCode": "class ActionType(Enum):\n    \"\"\"payment Action type\"\"\"\n    SUSCRIBE = \"Suscribe\"\n    PAY = \"Pay\"\nclass PaymentIntentCreate(SubscriptionCreate):\n    \"\"\"Payment Intent creation model\"\"\"\n    payment_data: PaymentMethodCreate\nclass PaymentIntent(SubscriptionCreate):\n    \"\"\"Payment Intent schema\"\"\"\n    id: UUID4",
        "detail": "leapfrog-subscription-service.schemas.subscription",
        "documentation": {}
    },
    {
        "label": "PaymentIntentCreate",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.subscription",
        "description": "leapfrog-subscription-service.schemas.subscription",
        "peekOfCode": "class PaymentIntentCreate(SubscriptionCreate):\n    \"\"\"Payment Intent creation model\"\"\"\n    payment_data: PaymentMethodCreate\nclass PaymentIntent(SubscriptionCreate):\n    \"\"\"Payment Intent schema\"\"\"\n    id: UUID4\n    user_id: str\n    payment_method_id: UUID4\n    action: ActionType\n    created_at: datetime",
        "detail": "leapfrog-subscription-service.schemas.subscription",
        "documentation": {}
    },
    {
        "label": "PaymentIntent",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.subscription",
        "description": "leapfrog-subscription-service.schemas.subscription",
        "peekOfCode": "class PaymentIntent(SubscriptionCreate):\n    \"\"\"Payment Intent schema\"\"\"\n    id: UUID4\n    user_id: str\n    payment_method_id: UUID4\n    action: ActionType\n    created_at: datetime\nclass PaymentIntentOut(BaseModel):\n    \"\"\"PaymetnInt Out model\"\"\"\n    payment_url: HttpUrl",
        "detail": "leapfrog-subscription-service.schemas.subscription",
        "documentation": {}
    },
    {
        "label": "PaymentIntentOut",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.schemas.subscription",
        "description": "leapfrog-subscription-service.schemas.subscription",
        "peekOfCode": "class PaymentIntentOut(BaseModel):\n    \"\"\"PaymetnInt Out model\"\"\"\n    payment_url: HttpUrl",
        "detail": "leapfrog-subscription-service.schemas.subscription",
        "documentation": {}
    },
    {
        "label": "message_processing_decorator",
        "kind": 2,
        "importPath": "leapfrog-subscription-service.services.event_service.consumer",
        "description": "leapfrog-subscription-service.services.event_service.consumer",
        "peekOfCode": "def message_processing_decorator(func):\n    \"\"\"Message processor decorator\"\"\"\n    async def wrapper(message: aio_pika.abc.AbstractIncomingMessage):\n        try:\n            msg = message.body.decode()\n            data = json.loads(msg)\n            await func(data)\n            await message.ack()\n        except (\n            ValidationError,",
        "detail": "leapfrog-subscription-service.services.event_service.consumer",
        "documentation": {}
    },
    {
        "label": "MessageProcessor",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.services.event_service.processors",
        "description": "leapfrog-subscription-service.services.event_service.processors",
        "peekOfCode": "class MessageProcessor:\n    \"\"\"Message Processor Class\"\"\"\n    queue_name: str\n    processor: Callable\n    async def run(self):\n        \"\"\"Run Message Processor\"\"\"\n        while True:\n            try:\n                await consume(self.queue_name, self.processor)\n            except AMQPConnectionError as error:",
        "detail": "leapfrog-subscription-service.services.event_service.processors",
        "documentation": {}
    },
    {
        "label": "processors",
        "kind": 5,
        "importPath": "leapfrog-subscription-service.services.event_service.processors",
        "description": "leapfrog-subscription-service.services.event_service.processors",
        "peekOfCode": "processors = [\n    # MessageProcessor(\n    #     queue_name=settings.QUEUE_NOTIFICATION_CREATE,\n    #     processor=perform_create_notification,\n    # ),\n]",
        "detail": "leapfrog-subscription-service.services.event_service.processors",
        "documentation": {}
    },
    {
        "label": "test_read_root",
        "kind": 2,
        "importPath": "leapfrog-subscription-service.tests.test_root",
        "description": "leapfrog-subscription-service.tests.test_root",
        "peekOfCode": "def test_read_root():\n    \"\"\"test root endpoint\"\"\"\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == \"SUBSCRIPTION SERVICE\"",
        "detail": "leapfrog-subscription-service.tests.test_root",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "leapfrog-subscription-service.tests.test_root",
        "description": "leapfrog-subscription-service.tests.test_root",
        "peekOfCode": "client = TestClient(app)\ndef test_read_root():\n    \"\"\"test root endpoint\"\"\"\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == \"SUBSCRIPTION SERVICE\"",
        "detail": "leapfrog-subscription-service.tests.test_root",
        "documentation": {}
    },
    {
        "label": "CustomParams",
        "kind": 6,
        "importPath": "leapfrog-subscription-service.utils.pagination",
        "description": "leapfrog-subscription-service.utils.pagination",
        "peekOfCode": "class CustomParams(Params):\n    \"\"\"Custom Pagination params\"\"\"\n    page: int = 1\n    size: int = 10\nasync def paginate_model(\n    query: FindMany[Document],\n    params: CustomParams,\n    fetch_links: bool = False,\n    full_load: bool = False,\n):",
        "detail": "leapfrog-subscription-service.utils.pagination",
        "documentation": {}
    },
    {
        "label": "token_saver",
        "kind": 2,
        "importPath": "leapfrog-subscription-service.utils.token",
        "description": "leapfrog-subscription-service.utils.token",
        "peekOfCode": "def token_saver(token):\n    \"\"\"Save token\"\"\"\n    with open(\"token.json\", \"w\", encoding=\"utf-8\") as file:\n        json.dump(token, file, indent=4)\ndef token_fetcher():\n    \"\"\"Fetch Token\"\"\"\n    try:\n        with open(\"token.json\", \"r\", encoding=\"utf-8\") as file:\n            token = json.load(file)\n            return token",
        "detail": "leapfrog-subscription-service.utils.token",
        "documentation": {}
    },
    {
        "label": "token_fetcher",
        "kind": 2,
        "importPath": "leapfrog-subscription-service.utils.token",
        "description": "leapfrog-subscription-service.utils.token",
        "peekOfCode": "def token_fetcher():\n    \"\"\"Fetch Token\"\"\"\n    try:\n        with open(\"token.json\", \"r\", encoding=\"utf-8\") as file:\n            token = json.load(file)\n            return token\n    # pylint: disable=W0718\n    except Exception:\n        return None",
        "detail": "leapfrog-subscription-service.utils.token",
        "documentation": {}
    },
    {
        "label": "read_root",
        "kind": 2,
        "importPath": "leapfrog-subscription-service.main",
        "description": "leapfrog-subscription-service.main",
        "peekOfCode": "def read_root():\n    \"\"\"Root Endpoint\"\"\"\n    return settings.API_TITLE\nif __name__ == \"__main__\":\n    uvicorn.run(\"main:app\", host=settings.API_HOST, port=settings.API_PORT, reload=True)",
        "detail": "leapfrog-subscription-service.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "leapfrog-subscription-service.main",
        "description": "leapfrog-subscription-service.main",
        "peekOfCode": "app = FastAPI(lifespan=lifespan, title=settings.API_TITLE)\n# Init IDP Connection\nidp.add_swagger_config(app)\n# Exceptions management\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(_: Request, exc: RequestValidationError):\n    \"\"\"Validation  exception handler\"\"\"\n    return JSONResponse(\n        status_code=HTTP_422_UNPROCESSABLE_ENTITY,\n        # Unprocessable Entity",
        "detail": "leapfrog-subscription-service.main",
        "documentation": {}
    },
    {
        "label": "certificate_router",
        "kind": 5,
        "importPath": "lms-service.api.certificate",
        "description": "lms-service.api.certificate",
        "peekOfCode": "certificate_router = APIRouter(prefix=\"/certificates\", tags=[\"Certificates\"])\n# Need certficate generation trigger endpoint ?\n@certificate_router.get(\"/\", response_model=Page[CertificateOut])\nasync def reads_certificates_or_by_course(\n    student_id: Optional[UUID4] = None,\n    params: CustomParams = Depends(),\n    full_load: bool = False,\n    current_user: OIDCUser = Depends(idp.get_current_user()),\n):\n    \"\"\"Get all certificates or only studuent certificates\"\"\"",
        "detail": "lms-service.api.certificate",
        "documentation": {}
    },
    {
        "label": "CourseOut",
        "kind": 6,
        "importPath": "lms-service.api.course",
        "description": "lms-service.api.course",
        "peekOfCode": "class CourseOut(CourseBase):\n    \"\"\"Course Out schema\"\"\"\n    instructor: InstructorOut\nclass CourseProgramOut(CourseProgram):\n    \"\"\"Course Program Out schema\"\"\"\n    instructor: InstructorOut\nclass CourseProgressOut(CourseProgressBase):\n    \"\"\"Course Progress Out schema\"\"\"\n    course: CourseOut\n######################### VIEWS #############################",
        "detail": "lms-service.api.course",
        "documentation": {}
    },
    {
        "label": "CourseProgramOut",
        "kind": 6,
        "importPath": "lms-service.api.course",
        "description": "lms-service.api.course",
        "peekOfCode": "class CourseProgramOut(CourseProgram):\n    \"\"\"Course Program Out schema\"\"\"\n    instructor: InstructorOut\nclass CourseProgressOut(CourseProgressBase):\n    \"\"\"Course Progress Out schema\"\"\"\n    course: CourseOut\n######################### VIEWS #############################\ncourse_router = APIRouter(\n    prefix=\"/courses\",\n)",
        "detail": "lms-service.api.course",
        "documentation": {}
    },
    {
        "label": "CourseProgressOut",
        "kind": 6,
        "importPath": "lms-service.api.course",
        "description": "lms-service.api.course",
        "peekOfCode": "class CourseProgressOut(CourseProgressBase):\n    \"\"\"Course Progress Out schema\"\"\"\n    course: CourseOut\n######################### VIEWS #############################\ncourse_router = APIRouter(\n    prefix=\"/courses\",\n)\n@course_router.post(\"/\", response_model=CourseOut, tags=[\"Courses\"])\nasync def create_course(\n    course_create: CourseCreate = Body(...),",
        "detail": "lms-service.api.course",
        "documentation": {}
    },
    {
        "label": "course_router",
        "kind": 5,
        "importPath": "lms-service.api.course",
        "description": "lms-service.api.course",
        "peekOfCode": "course_router = APIRouter(\n    prefix=\"/courses\",\n)\n@course_router.post(\"/\", response_model=CourseOut, tags=[\"Courses\"])\nasync def create_course(\n    course_create: CourseCreate = Body(...),\n    image: UploadFile = File(...),\n    video: Optional[UploadFile] = File(None),\n    current_user: OIDCUser = Depends(idp.get_current_user()),\n):",
        "detail": "lms-service.api.course",
        "documentation": {}
    },
    {
        "label": "InstructorOut",
        "kind": 6,
        "importPath": "lms-service.api.instructor",
        "description": "lms-service.api.instructor",
        "peekOfCode": "class InstructorOut(InstructorBase):\n    \"\"\"Instructor Out schema\"\"\"\n    last_name: str | None = None\n    first_name: str | None = None\n    email: str | None = None\n    @model_validator(mode=\"before\")\n    @classmethod\n    def fetch_name(cls, data):\n        \"\"\"Fetch Instructor Names\"\"\"\n        if isinstance(data, Instructor):",
        "detail": "lms-service.api.instructor",
        "documentation": {}
    },
    {
        "label": "instructor_router",
        "kind": 5,
        "importPath": "lms-service.api.instructor",
        "description": "lms-service.api.instructor",
        "peekOfCode": "instructor_router = APIRouter(prefix=\"/instructors\", tags=[\"Instructors\"])\n@instructor_router.post(\"/\", response_model=InstructorOut)\nasync def create_instructor(\n    instructor_create: InstructorCreate,\n    current_user: OIDCUser = Depends(idp.get_current_user()),\n):\n    \"\"\"Create instructor profile\"\"\"\n    user_id = instructor_create.user_id\n    if Roles.STAFF in current_user.roles:\n        await verify_user_id(user_id=user_id)",
        "detail": "lms-service.api.instructor",
        "documentation": {}
    },
    {
        "label": "lesson_router",
        "kind": 5,
        "importPath": "lms-service.api.lesson",
        "description": "lms-service.api.lesson",
        "peekOfCode": "lesson_router = APIRouter(prefix=\"/lessons\", tags=[\"Lessons\"])\n@lesson_router.post(\"/\", response_model=LessonOut)\nasync def create_lesson(\n    lesson_create: LessonCreate = Body(...),\n    video: Optional[UploadFile] = File(None),\n    resources: Optional[list[UploadFile]] = None,\n    current_user: OIDCUser = Depends(idp.get_current_user()),\n):\n    \"\"\"Create Lesson\"\"\"\n    course, module = await get_module_by_id(",
        "detail": "lms-service.api.lesson",
        "documentation": {}
    },
    {
        "label": "module_router",
        "kind": 5,
        "importPath": "lms-service.api.module",
        "description": "lms-service.api.module",
        "peekOfCode": "module_router = APIRouter(prefix=\"/modules\", tags=[\"Modules\"])\n@module_router.post(\"/\", response_model=ModuleOut)\nasync def create_module(\n    module_create: ModuleCreate,\n    current_user: OIDCUser = Depends(idp.get_current_user()),\n):\n    \"\"\"Add module to a course\"\"\"\n    course = await get_course_by_id(\n        course_id=module_create.course_id, current_user=current_user\n    )",
        "detail": "lms-service.api.module",
        "documentation": {}
    },
    {
        "label": "course_router",
        "kind": 5,
        "importPath": "lms-service.api.note",
        "description": "lms-service.api.note",
        "peekOfCode": "course_router = APIRouter(prefix=\"/notes\", tags=[\"Student Courses notes\"])\n@course_router.post(\n    \"/\",\n    response_model=NoteOut,\n)\nasync def create_note(\n    note_create: NoteCreate,\n    current_user: OIDCUser = Depends(idp.get_current_user(Roles.STUDENT)),\n):\n    \"\"\"Add note to course\"\"\"",
        "detail": "lms-service.api.note",
        "documentation": {}
    },
    {
        "label": "review_router",
        "kind": 5,
        "importPath": "lms-service.api.review",
        "description": "lms-service.api.review",
        "peekOfCode": "review_router = APIRouter(prefix=\"/reviews\", tags=[\"Reviews\"])\n@review_router.post(\"/\", response_model=ReviewOut)\nasync def review_course(\n    review_create: ReviewCreate,\n    current_user: OIDCUser = Depends(\n        idp.get_current_user(required_roles=[Roles.STUDENT])\n    ),\n):\n    \"\"\"Add review to a course\"\"\"\n    _, student = await get_student_profile(",
        "detail": "lms-service.api.review",
        "documentation": {}
    },
    {
        "label": "StudentOut",
        "kind": 6,
        "importPath": "lms-service.api.student",
        "description": "lms-service.api.student",
        "peekOfCode": "class StudentOut(StudentBase):\n    \"\"\"Student Out schema\"\"\"\n    last_name: str | None = None\n    first_name: str | None = None\n    email: str | None = None\n    @model_validator(mode=\"before\")\n    @classmethod\n    def fetch_name(cls, data):\n        \"\"\"Fetch Stduent Names\"\"\"\n        if isinstance(data, Student):",
        "detail": "lms-service.api.student",
        "documentation": {}
    },
    {
        "label": "student_router",
        "kind": 5,
        "importPath": "lms-service.api.student",
        "description": "lms-service.api.student",
        "peekOfCode": "student_router = APIRouter(prefix=\"/students\", tags=[\"Students\"])\n@student_router.post(\"/\", response_model=StudentOut)\nasync def create_student(\n    student_create: StudentCreate,\n    current_user: OIDCUser = Depends(idp.get_current_user()),\n):\n    \"\"\"Create Student profile\"\"\"\n    user_id = student_create.user_id\n    if Roles.STAFF in current_user.roles:\n        await verify_user_id(user_id=user_id)",
        "detail": "lms-service.api.student",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "lms-service.core.config",
        "description": "lms-service.core.config",
        "peekOfCode": "class Settings(BaseSettings):\n    \"\"\"Env Variables\"\"\"\n    # General\n    API_TITLE: str\n    API_HOST: str\n    API_PORT: int\n    # Keycloak\n    KEYCLOAK_SERVER: str\n    KEYCLOAK_CLIENT_ID: str\n    KEYCLOAK_CLIENT_SECRET: str",
        "detail": "lms-service.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "lms-service.core.config",
        "description": "lms-service.core.config",
        "peekOfCode": "settings = Settings()",
        "detail": "lms-service.core.config",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "lms-service.core.database",
        "description": "lms-service.core.database",
        "peekOfCode": "client = AsyncIOMotorClient(\n    f\"mongodb://{settings.MONGO_USER}:{settings.MONGO_PASSWORD}@{settings.MONGO_HOST}:{settings.MONGO_PORT}\",\n    uuidRepresentation=\"standard\",\n)\nasync def init_database():\n    \"\"\"Init database connection\"\"\"\n    await init_beanie(\n        database=client[settings.MONGO_DB],\n        document_models=[\n            Course,",
        "detail": "lms-service.core.database",
        "documentation": {}
    },
    {
        "label": "configure_logging",
        "kind": 2,
        "importPath": "lms-service.core.log",
        "description": "lms-service.core.log",
        "peekOfCode": "def configure_logging():\n    \"\"\"Configure logging for whole app\"\"\"\n    app_name = settings.API_TITLE.replace(\" \", \"-\").lower()\n    log_level = settings.LOG_LEVEL\n    log_file_pattern = f\"{app_name}_*.log\"  # Pattern for log files\n    log_dir = \"logs\"  # Directory to store logs\n    # Create the log directory if it doesn't exist\n    os.makedirs(log_dir, exist_ok=True)\n    # Find the highest existing log number to increment from\n    existing_logs = glob.glob(os.path.join(log_dir, log_file_pattern))",
        "detail": "lms-service.core.log",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "lms-service.core.log",
        "description": "lms-service.core.log",
        "peekOfCode": "logger = logging.getLogger(__name__)",
        "detail": "lms-service.core.log",
        "documentation": {}
    },
    {
        "label": "init_keycloak",
        "kind": 2,
        "importPath": "lms-service.core.security",
        "description": "lms-service.core.security",
        "peekOfCode": "def init_keycloak():\n    \"\"\"Init Keycloak instance for FastAPI\"\"\"\n    return FastAPIKeycloak(\n        server_url=settings.KEYCLOAK_SERVER,\n        client_id=settings.KEYCLOAK_CLIENT_ID,\n        client_secret=settings.KEYCLOAK_CLIENT_SECRET,\n        admin_client_secret=settings.KEYCLOAK_ADMIN_CLIENT_SECRET,\n        realm=settings.KEYCLOAK_REALM,\n        callback_uri=settings.KEYCLOAK_CALLBACK_URI,\n    )",
        "detail": "lms-service.core.security",
        "documentation": {}
    },
    {
        "label": "get_keycloak_user",
        "kind": 2,
        "importPath": "lms-service.core.security",
        "description": "lms-service.core.security",
        "peekOfCode": "def get_keycloak_user(\n    current_user: OIDCUser,\n    required_roles: List[str] = None,\n    fetch_user: bool = False,\n) -> KeycloakUser:\n    \"\"\"Retrieves a KeycloakUser from the current_user.\"\"\"\n    if required_roles:\n        msg = f\"One of thes roles ({', '.join(required_roles)}) is required to perform this action\"\n        if not any(role in current_user.roles for role in required_roles):\n            raise HTTPException(",
        "detail": "lms-service.core.security",
        "documentation": {}
    },
    {
        "label": "get_token",
        "kind": 2,
        "importPath": "lms-service.core.security",
        "description": "lms-service.core.security",
        "peekOfCode": "def get_token():\n    \"\"\"get Token\"\"\"\n    headers = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\n    data = {\n        \"client_id\": settings.KEYCLOAK_CLIENT_ID,\n        \"client_secret\": settings.KEYCLOAK_CLIENT_SECRET,\n        \"grant_type\": \"client_credentials\",\n    }\n    response = requests.post(\n        url=idp.token_uri, headers=headers, data=data, timeout=300",
        "detail": "lms-service.core.security",
        "documentation": {}
    },
    {
        "label": "get_session",
        "kind": 2,
        "importPath": "lms-service.core.security",
        "description": "lms-service.core.security",
        "peekOfCode": "def get_session():\n    \"\"\"Get Session\"\"\"\n    # fetching token\n    token = token_fetcher()\n    if token is None or not idp.token_is_valid(token=token):\n        token = get_token()\n        token_saver(token=token)\n    session = requests.Session()\n    # Configuration de la session si nécessaire (headers, etc.)\n    session.headers.setdefault(\"Authorization\", f\"Bearer {token}\")",
        "detail": "lms-service.core.security",
        "documentation": {}
    },
    {
        "label": "idp",
        "kind": 5,
        "importPath": "lms-service.core.security",
        "description": "lms-service.core.security",
        "peekOfCode": "idp = init_keycloak()\ndef get_keycloak_user(\n    current_user: OIDCUser,\n    required_roles: List[str] = None,\n    fetch_user: bool = False,\n) -> KeycloakUser:\n    \"\"\"Retrieves a KeycloakUser from the current_user.\"\"\"\n    if required_roles:\n        msg = f\"One of thes roles ({', '.join(required_roles)}) is required to perform this action\"\n        if not any(role in current_user.roles for role in required_roles):",
        "detail": "lms-service.core.security",
        "documentation": {}
    },
    {
        "label": "Certificate",
        "kind": 6,
        "importPath": "lms-service.models.certificate",
        "description": "lms-service.models.certificate",
        "peekOfCode": "class Certificate(DocumentBase, CertificateBase):\n    \"\"\"Certificate Db model\"\"\"\n    @classmethod\n    def get_student_id(cls, student_id: str) -> FindMany[\"Certificate\"]:\n        \"\"\"Get certificates by student id.\"\"\"\n        return cls.find(cls.student_id == student_id)\n    class Settings:\n        \"\"\"Db Settings\"\"\"\n        name = \"certificate\"\n        indexes = [",
        "detail": "lms-service.models.certificate",
        "documentation": {}
    },
    {
        "label": "Course",
        "kind": 6,
        "importPath": "lms-service.models.course",
        "description": "lms-service.models.course",
        "peekOfCode": "class Course(DocumentBase, CourseBase):\n    \"\"\"Course Db model\"\"\"\n    modules: List[Link[Module]] = []\n    reviews: List[Link[Review]] = []\n    instructor: Link[Instructor]\n    @after_event(Delete)\n    async def delete_linked_documents(self):\n        \"\"\"Deletes linked Modules and Reviews, but keeps Instructor.\"\"\"\n        try:\n            # Delete linked Modules",
        "detail": "lms-service.models.course",
        "documentation": {}
    },
    {
        "label": "CourseProgress",
        "kind": 6,
        "importPath": "lms-service.models.course",
        "description": "lms-service.models.course",
        "peekOfCode": "class CourseProgress(DocumentBase, CourseProgressBase):\n    \"\"\"Student course progress Db model\"\"\"\n    course: Link[Course]\n    notes: List[Link[Note]]\n    @classmethod\n    async def get_course_student_id(\n        cls, student_id: UUID4, course_id: UUID4\n    ) -> Optional[\"CourseProgress\"]:\n        \"\"\"Get a course by student id.\"\"\"\n        return await cls.find_one(",
        "detail": "lms-service.models.course",
        "documentation": {}
    },
    {
        "label": "DocumentBase",
        "kind": 6,
        "importPath": "lms-service.models.document",
        "description": "lms-service.models.document",
        "peekOfCode": "class DocumentBase(Document):\n    \"\"\"Document Base Db model\"\"\"\n    id: UUID4 = Field(default_factory=uuid4, alias=\"_id\")\n    created_at: datetime = Field(default_factory=datetime.now)\n    updated_at: datetime = Field(default_factory=datetime.now)\n    async def save(self, *args, **kwargs):\n        self.updated_at = datetime.now()\n        await super().save(*args, **kwargs)",
        "detail": "lms-service.models.document",
        "documentation": {}
    },
    {
        "label": "Instructor",
        "kind": 6,
        "importPath": "lms-service.models.instructor",
        "description": "lms-service.models.instructor",
        "peekOfCode": "class Instructor(DocumentBase, InstructorBase):\n    \"\"\"Instructor Db model\"\"\"\n    user_id: Annotated[str, Indexed(unique=True)]\n    @classmethod\n    async def get_user_id(cls, user_id: str) -> Optional[\"Instructor\"]:\n        \"\"\"Get instructor by user id.\"\"\"\n        return await cls.find_one(cls.user_id == user_id)\n    class Settings:\n        \"\"\"DB setting\"\"\"\n        name = \"instructor\"",
        "detail": "lms-service.models.instructor",
        "documentation": {}
    },
    {
        "label": "Lesson",
        "kind": 6,
        "importPath": "lms-service.models.lesson",
        "description": "lms-service.models.lesson",
        "peekOfCode": "class Lesson(DocumentBase, LessonBase):\n    \"\"\"Lesson Db model\"\"\"\n    @classmethod\n    def get_module_id(cls, module_id: str) -> FindMany[\"Lesson\"]:\n        \"\"\"Get lessons by module id.\"\"\"\n        return cls.find(cls.module_id == module_id)\n    @classmethod\n    def get_course_id(cls, course_id: str) -> FindMany[\"Lesson\"]:\n        \"\"\"Get lessons by course id.\"\"\"\n        return cls.find(cls.course_id == course_id)",
        "detail": "lms-service.models.lesson",
        "documentation": {}
    },
    {
        "label": "Module",
        "kind": 6,
        "importPath": "lms-service.models.module",
        "description": "lms-service.models.module",
        "peekOfCode": "class Module(DocumentBase, ModuleBase):\n    \"\"\"Module Db model\"\"\"\n    lessons: List[Link[Lesson]] = []\n    @classmethod\n    def get_course_id(cls, course_id: str) -> FindMany[\"Module\"]:\n        \"\"\"Get modules by course id.\"\"\"\n        return cls.find(cls.course_id == course_id)\n    class Settings:\n        \"\"\"Db setting\"\"\"\n        name = \"module\"",
        "detail": "lms-service.models.module",
        "documentation": {}
    },
    {
        "label": "Note",
        "kind": 6,
        "importPath": "lms-service.models.note",
        "description": "lms-service.models.note",
        "peekOfCode": "class Note(DocumentBase, NoteBase):\n    \"\"\"Notes class\"\"\"\n    class Settings:\n        \"\"\"Database setting\"\"\"\n        name = \"note\"",
        "detail": "lms-service.models.note",
        "documentation": {}
    },
    {
        "label": "Review",
        "kind": 6,
        "importPath": "lms-service.models.review",
        "description": "lms-service.models.review",
        "peekOfCode": "class Review(DocumentBase, ReviewBase):\n    \"\"\"Review Db model\"\"\"\n    @classmethod\n    def get_course_id(cls, course_id: UUID4) -> FindMany[\"Review\"]:\n        \"\"\"Get reviews by course id.\"\"\"\n        return cls.find(\n            cls.course_id == course_id,\n        )\n    class Settings:\n        \"\"\"Db settings\"\"\"",
        "detail": "lms-service.models.review",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "lms-service.models.student",
        "description": "lms-service.models.student",
        "peekOfCode": "class Student(DocumentBase, StudentBase):\n    \"\"\"Student Db model\"\"\"\n    user_id: Annotated[str, Indexed(unique=True)]\n    @classmethod\n    async def get_user_id(cls, user_id: str) -> Optional[\"Student\"]:\n        \"\"\"Get student by user id.\"\"\"\n        return await cls.find_one(cls.user_id == user_id)\n    class Settings:\n        \"\"\"Db Settings\"\"\"\n        name = \"student\"",
        "detail": "lms-service.models.student",
        "documentation": {}
    },
    {
        "label": "CategoryBase",
        "kind": 6,
        "importPath": "lms-service.schemas.category",
        "description": "lms-service.schemas.category",
        "peekOfCode": "class CategoryBase(BaseModel):\n    \"\"\"Category base model\"\"\"\n    name: str\n    description: str\nclass CategoxyCreate(CategoryBase):\n    \"\"\"Course category creattion model\"\"\"\nclass CategoryUpdate(BaseModel):\n    \"\"\"Category update model\"\"\"\n    name: Optional[str] = None\n    description: Optional[str] = None",
        "detail": "lms-service.schemas.category",
        "documentation": {}
    },
    {
        "label": "CategoxyCreate",
        "kind": 6,
        "importPath": "lms-service.schemas.category",
        "description": "lms-service.schemas.category",
        "peekOfCode": "class CategoxyCreate(CategoryBase):\n    \"\"\"Course category creattion model\"\"\"\nclass CategoryUpdate(BaseModel):\n    \"\"\"Category update model\"\"\"\n    name: Optional[str] = None\n    description: Optional[str] = None\nclass Category(CategoryBase):\n    \"\"\"Category schema\"\"\"\n    id: UUID4\n    # subcatergory(eventually)",
        "detail": "lms-service.schemas.category",
        "documentation": {}
    },
    {
        "label": "CategoryUpdate",
        "kind": 6,
        "importPath": "lms-service.schemas.category",
        "description": "lms-service.schemas.category",
        "peekOfCode": "class CategoryUpdate(BaseModel):\n    \"\"\"Category update model\"\"\"\n    name: Optional[str] = None\n    description: Optional[str] = None\nclass Category(CategoryBase):\n    \"\"\"Category schema\"\"\"\n    id: UUID4\n    # subcatergory(eventually)\n    created_at: datetime\n    updated_at: datetime",
        "detail": "lms-service.schemas.category",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "lms-service.schemas.category",
        "description": "lms-service.schemas.category",
        "peekOfCode": "class Category(CategoryBase):\n    \"\"\"Category schema\"\"\"\n    id: UUID4\n    # subcatergory(eventually)\n    created_at: datetime\n    updated_at: datetime",
        "detail": "lms-service.schemas.category",
        "documentation": {}
    },
    {
        "label": "CertificateBase",
        "kind": 6,
        "importPath": "lms-service.schemas.certificate",
        "description": "lms-service.schemas.certificate",
        "peekOfCode": "class CertificateBase(BaseModel):\n    \"\"\"Certificate base model\"\"\"\n    student_id: UUID4\n    course_id: UUID4\n    file_url: HttpUrl\nclass CertificateCreate(CertificateBase):\n    \"\"\"Certficate create model\"\"\"\nclass Certificate(CertificateBase):\n    \"\"\"Certficate schema\"\"\"\n    id: UUID4",
        "detail": "lms-service.schemas.certificate",
        "documentation": {}
    },
    {
        "label": "CertificateCreate",
        "kind": 6,
        "importPath": "lms-service.schemas.certificate",
        "description": "lms-service.schemas.certificate",
        "peekOfCode": "class CertificateCreate(CertificateBase):\n    \"\"\"Certficate create model\"\"\"\nclass Certificate(CertificateBase):\n    \"\"\"Certficate schema\"\"\"\n    id: UUID4\n    created_at: datetime\n    updated_at: datetime",
        "detail": "lms-service.schemas.certificate",
        "documentation": {}
    },
    {
        "label": "Certificate",
        "kind": 6,
        "importPath": "lms-service.schemas.certificate",
        "description": "lms-service.schemas.certificate",
        "peekOfCode": "class Certificate(CertificateBase):\n    \"\"\"Certficate schema\"\"\"\n    id: UUID4\n    created_at: datetime\n    updated_at: datetime",
        "detail": "lms-service.schemas.certificate",
        "documentation": {}
    },
    {
        "label": "Level",
        "kind": 6,
        "importPath": "lms-service.schemas.course",
        "description": "lms-service.schemas.course",
        "peekOfCode": "class Level(str, Enum):\n    \"\"\"Course level enumeration\"\"\"\n    BEGINNER = \"Beginner\"\n    INTERMEDIATE = \"Intermediate\"\n    ADVANCED = \"Advanced\"\nclass CourseBase(BaseModel):\n    \"\"\"Course base model\"\"\"\n    title: str\n    description: Optional[str] = None\n    duration: float",
        "detail": "lms-service.schemas.course",
        "documentation": {}
    },
    {
        "label": "CourseBase",
        "kind": 6,
        "importPath": "lms-service.schemas.course",
        "description": "lms-service.schemas.course",
        "peekOfCode": "class CourseBase(BaseModel):\n    \"\"\"Course base model\"\"\"\n    title: str\n    description: Optional[str] = None\n    duration: float\n    level: Level\n    category: str\nclass CourseCreate(CourseBase):\n    \"\"\"Course creation model\"\"\"\n    # category_id: UUID4",
        "detail": "lms-service.schemas.course",
        "documentation": {}
    },
    {
        "label": "CourseCreate",
        "kind": 6,
        "importPath": "lms-service.schemas.course",
        "description": "lms-service.schemas.course",
        "peekOfCode": "class CourseCreate(CourseBase):\n    \"\"\"Course creation model\"\"\"\n    # category_id: UUID4\n    instructor_id: Optional[UUID4] = None\n    @model_validator(mode=\"before\")\n    @classmethod\n    def validate_to_json(cls, value):\n        \"\"\"Validate to json\"\"\"\n        if isinstance(value, str):\n            return cls(**json.loads(value))",
        "detail": "lms-service.schemas.course",
        "documentation": {}
    },
    {
        "label": "CourseUpdate",
        "kind": 6,
        "importPath": "lms-service.schemas.course",
        "description": "lms-service.schemas.course",
        "peekOfCode": "class CourseUpdate(BaseModel):\n    \"\"\"Course update model\"\"\"\n    title: Optional[str] = None\n    description: Optional[str] = None\n    category_id: Optional[UUID4] = None\n    duration: Optional[float] = None\n    level: Optional[Level] = None\n    @model_validator(mode=\"before\")\n    @classmethod\n    def validate_to_json(cls, value):",
        "detail": "lms-service.schemas.course",
        "documentation": {}
    },
    {
        "label": "Course",
        "kind": 6,
        "importPath": "lms-service.schemas.course",
        "description": "lms-service.schemas.course",
        "peekOfCode": "class Course(CourseBase):\n    \"\"\"Course model\"\"\"\n    id: UUID4\n    image: HttpUrl\n    video: Optional[HttpUrl] = None\n    # category: Category\n    instructor_id: UUID4\n    instructor: Instructor\n    modules: List[Module]\n    rating: int | None = None",
        "detail": "lms-service.schemas.course",
        "documentation": {}
    },
    {
        "label": "CourseProgram",
        "kind": 6,
        "importPath": "lms-service.schemas.course",
        "description": "lms-service.schemas.course",
        "peekOfCode": "class CourseProgram(Course):\n    \"\"\"Course program model\"\"\"\n    modules: List[ModuleProgram]\nclass CourseProgressUpdate(BaseModel):\n    \"\"\"Course Progress update schema\"\"\"\n    is_favoris: Optional[bool] = None\n    is_archive: Optional[bool] = None\nclass CourseProgress(BaseModel):\n    \"\"\"Course Porgress schema\"\"\"\n    id: UUID4",
        "detail": "lms-service.schemas.course",
        "documentation": {}
    },
    {
        "label": "CourseProgressUpdate",
        "kind": 6,
        "importPath": "lms-service.schemas.course",
        "description": "lms-service.schemas.course",
        "peekOfCode": "class CourseProgressUpdate(BaseModel):\n    \"\"\"Course Progress update schema\"\"\"\n    is_favoris: Optional[bool] = None\n    is_archive: Optional[bool] = None\nclass CourseProgress(BaseModel):\n    \"\"\"Course Porgress schema\"\"\"\n    id: UUID4\n    student_id: UUID4\n    course_id: UUID4\n    course: Course",
        "detail": "lms-service.schemas.course",
        "documentation": {}
    },
    {
        "label": "CourseProgress",
        "kind": 6,
        "importPath": "lms-service.schemas.course",
        "description": "lms-service.schemas.course",
        "peekOfCode": "class CourseProgress(BaseModel):\n    \"\"\"Course Porgress schema\"\"\"\n    id: UUID4\n    student_id: UUID4\n    course_id: UUID4\n    course: Course\n    is_favoris: bool = False\n    is_archive: bool = False\n    notes: Optional[List[Note]] = []\n    completed_modules: List[UUID4] = []",
        "detail": "lms-service.schemas.course",
        "documentation": {}
    },
    {
        "label": "InstructorBase",
        "kind": 6,
        "importPath": "lms-service.schemas.instructor",
        "description": "lms-service.schemas.instructor",
        "peekOfCode": "class InstructorBase(BaseModel):\n    \"\"\"Instructor Base model\"\"\"\n    bio: Optional[str] = None\n    expertise: Optional[list[str]] = None\nclass InstructorCreate(InstructorBase):\n    \"\"\"Instructor creation model\"\"\"\n    user_id: Optional[str] = None\nclass InstructorUpdate(InstructorBase):\n    \"\"\"Instructor Update model\"\"\"\nclass Instructor(InstructorBase):",
        "detail": "lms-service.schemas.instructor",
        "documentation": {}
    },
    {
        "label": "InstructorCreate",
        "kind": 6,
        "importPath": "lms-service.schemas.instructor",
        "description": "lms-service.schemas.instructor",
        "peekOfCode": "class InstructorCreate(InstructorBase):\n    \"\"\"Instructor creation model\"\"\"\n    user_id: Optional[str] = None\nclass InstructorUpdate(InstructorBase):\n    \"\"\"Instructor Update model\"\"\"\nclass Instructor(InstructorBase):\n    \"\"\"Instructor schema\"\"\"\n    id: UUID4\n    user_id: str\n    bio: Optional[str]",
        "detail": "lms-service.schemas.instructor",
        "documentation": {}
    },
    {
        "label": "InstructorUpdate",
        "kind": 6,
        "importPath": "lms-service.schemas.instructor",
        "description": "lms-service.schemas.instructor",
        "peekOfCode": "class InstructorUpdate(InstructorBase):\n    \"\"\"Instructor Update model\"\"\"\nclass Instructor(InstructorBase):\n    \"\"\"Instructor schema\"\"\"\n    id: UUID4\n    user_id: str\n    bio: Optional[str]\n    expertise: Optional[list[str]]\n    created_at: datetime\n    updated_at: datetime",
        "detail": "lms-service.schemas.instructor",
        "documentation": {}
    },
    {
        "label": "Instructor",
        "kind": 6,
        "importPath": "lms-service.schemas.instructor",
        "description": "lms-service.schemas.instructor",
        "peekOfCode": "class Instructor(InstructorBase):\n    \"\"\"Instructor schema\"\"\"\n    id: UUID4\n    user_id: str\n    bio: Optional[str]\n    expertise: Optional[list[str]]\n    created_at: datetime\n    updated_at: datetime",
        "detail": "lms-service.schemas.instructor",
        "documentation": {}
    },
    {
        "label": "LessonBase",
        "kind": 6,
        "importPath": "lms-service.schemas.lesson",
        "description": "lms-service.schemas.lesson",
        "peekOfCode": "class LessonBase(BaseModel):\n    \"\"\"Lesson Base model\"\"\"\n    name: str\n    description: Optional[str] = None\n    order: int\n    duration: float\n    content: str\n    module_id: UUID4\nclass LessonCreate(LessonBase):\n    \"\"\"Lesson creation model\"\"\"",
        "detail": "lms-service.schemas.lesson",
        "documentation": {}
    },
    {
        "label": "LessonCreate",
        "kind": 6,
        "importPath": "lms-service.schemas.lesson",
        "description": "lms-service.schemas.lesson",
        "peekOfCode": "class LessonCreate(LessonBase):\n    \"\"\"Lesson creation model\"\"\"\n    @model_validator(mode=\"before\")\n    @classmethod\n    def validate_to_json(cls, value):\n        \"\"\"Validate to json\"\"\"\n        if isinstance(value, str):\n            return cls(**json.loads(value))\n        return value\n    @field_validator(\"*\", check_fields=True, mode=\"before\")",
        "detail": "lms-service.schemas.lesson",
        "documentation": {}
    },
    {
        "label": "LessonUpdate",
        "kind": 6,
        "importPath": "lms-service.schemas.lesson",
        "description": "lms-service.schemas.lesson",
        "peekOfCode": "class LessonUpdate(BaseModel):\n    \"\"\"Lesson Update Model\"\"\"\n    name: Optional[str] = None\n    description: Optional[str] = None\n    order: Optional[int] = None\n    duration: Optional[float] = None\n    content: Optional[str] = None\n    @model_validator(mode=\"before\")\n    @classmethod\n    def validate_to_json(cls, value):",
        "detail": "lms-service.schemas.lesson",
        "documentation": {}
    },
    {
        "label": "Lesson",
        "kind": 6,
        "importPath": "lms-service.schemas.lesson",
        "description": "lms-service.schemas.lesson",
        "peekOfCode": "class Lesson(LessonBase):\n    \"\"\"Lesson schema\"\"\"\n    id: UUID4\n    course_id: UUID4\n    video: Optional[HttpUrl] = None\n    resources: Optional[List[HttpUrl]] = []\n    created_at: datetime\n    updated_at: datetime",
        "detail": "lms-service.schemas.lesson",
        "documentation": {}
    },
    {
        "label": "ModuleBase",
        "kind": 6,
        "importPath": "lms-service.schemas.module",
        "description": "lms-service.schemas.module",
        "peekOfCode": "class ModuleBase(BaseModel):\n    \"\"\"Module base model\"\"\"\n    name: str\n    description: Optional[str] = None\n    order: int\n    course_id: UUID4\nclass ModuleCreate(ModuleBase):\n    \"\"\"Module create model\"\"\"\nclass ModuleUpdate(BaseModel):\n    \"\"\"Module update model\"\"\"",
        "detail": "lms-service.schemas.module",
        "documentation": {}
    },
    {
        "label": "ModuleCreate",
        "kind": 6,
        "importPath": "lms-service.schemas.module",
        "description": "lms-service.schemas.module",
        "peekOfCode": "class ModuleCreate(ModuleBase):\n    \"\"\"Module create model\"\"\"\nclass ModuleUpdate(BaseModel):\n    \"\"\"Module update model\"\"\"\n    name: Optional[str] = None\n    description: Optional[str] = None\n    order: Optional[int] = None\nclass Module(ModuleBase):\n    \"\"\"Module read model\"\"\"\n    id: UUID4",
        "detail": "lms-service.schemas.module",
        "documentation": {}
    },
    {
        "label": "ModuleUpdate",
        "kind": 6,
        "importPath": "lms-service.schemas.module",
        "description": "lms-service.schemas.module",
        "peekOfCode": "class ModuleUpdate(BaseModel):\n    \"\"\"Module update model\"\"\"\n    name: Optional[str] = None\n    description: Optional[str] = None\n    order: Optional[int] = None\nclass Module(ModuleBase):\n    \"\"\"Module read model\"\"\"\n    id: UUID4\n    lessons: List[Lesson]\n    created_at: datetime",
        "detail": "lms-service.schemas.module",
        "documentation": {}
    },
    {
        "label": "Module",
        "kind": 6,
        "importPath": "lms-service.schemas.module",
        "description": "lms-service.schemas.module",
        "peekOfCode": "class Module(ModuleBase):\n    \"\"\"Module read model\"\"\"\n    id: UUID4\n    lessons: List[Lesson]\n    created_at: datetime\n    updated_at: datetime\nclass ModuleProgram(ModuleBase):\n    \"\"\"Module Program model\"\"\"\n    lessons: List[LessonBase]",
        "detail": "lms-service.schemas.module",
        "documentation": {}
    },
    {
        "label": "ModuleProgram",
        "kind": 6,
        "importPath": "lms-service.schemas.module",
        "description": "lms-service.schemas.module",
        "peekOfCode": "class ModuleProgram(ModuleBase):\n    \"\"\"Module Program model\"\"\"\n    lessons: List[LessonBase]",
        "detail": "lms-service.schemas.module",
        "documentation": {}
    },
    {
        "label": "NoteBase",
        "kind": 6,
        "importPath": "lms-service.schemas.note",
        "description": "lms-service.schemas.note",
        "peekOfCode": "class NoteBase(BaseModel):\n    \"\"\"Note base model\"\"\"\n    content: str\nclass NoteCreate(NoteBase):\n    \"\"\"Note create class\"\"\"\n    progress_id: UUID4\nclass Note(NoteBase):\n    \"\"\"Corse notes model\"\"\"\n    id: UUID4\n    progress_id: UUID4",
        "detail": "lms-service.schemas.note",
        "documentation": {}
    },
    {
        "label": "NoteCreate",
        "kind": 6,
        "importPath": "lms-service.schemas.note",
        "description": "lms-service.schemas.note",
        "peekOfCode": "class NoteCreate(NoteBase):\n    \"\"\"Note create class\"\"\"\n    progress_id: UUID4\nclass Note(NoteBase):\n    \"\"\"Corse notes model\"\"\"\n    id: UUID4\n    progress_id: UUID4\n    created_at: datetime\n    updated_at: datetime\nclass NoteUpdate(BaseModel):",
        "detail": "lms-service.schemas.note",
        "documentation": {}
    },
    {
        "label": "Note",
        "kind": 6,
        "importPath": "lms-service.schemas.note",
        "description": "lms-service.schemas.note",
        "peekOfCode": "class Note(NoteBase):\n    \"\"\"Corse notes model\"\"\"\n    id: UUID4\n    progress_id: UUID4\n    created_at: datetime\n    updated_at: datetime\nclass NoteUpdate(BaseModel):\n    \"\"\"Note update model\"\"\"\n    content: str",
        "detail": "lms-service.schemas.note",
        "documentation": {}
    },
    {
        "label": "NoteUpdate",
        "kind": 6,
        "importPath": "lms-service.schemas.note",
        "description": "lms-service.schemas.note",
        "peekOfCode": "class NoteUpdate(BaseModel):\n    \"\"\"Note update model\"\"\"\n    content: str",
        "detail": "lms-service.schemas.note",
        "documentation": {}
    },
    {
        "label": "BillingCycle",
        "kind": 6,
        "importPath": "lms-service.schemas.plan",
        "description": "lms-service.schemas.plan",
        "peekOfCode": "class BillingCycle(Enum):\n    \"\"\"Billing cycle enumerations\"\"\"\n    MONTHLY = \"monthly\"\n    ANNUALLY = \"annually\"\nclass PlanBase(BaseModel):\n    \"\"\"Plan Base model\"\"\"\n    name: str\n    description: str\n    price: float\n    billing_cycle: BillingCycle",
        "detail": "lms-service.schemas.plan",
        "documentation": {}
    },
    {
        "label": "PlanBase",
        "kind": 6,
        "importPath": "lms-service.schemas.plan",
        "description": "lms-service.schemas.plan",
        "peekOfCode": "class PlanBase(BaseModel):\n    \"\"\"Plan Base model\"\"\"\n    name: str\n    description: str\n    price: float\n    billing_cycle: BillingCycle\n    features: list[str]\n    active: bool\n    is_trial: bool\nclass PlanCreate(PlanBase):",
        "detail": "lms-service.schemas.plan",
        "documentation": {}
    },
    {
        "label": "PlanCreate",
        "kind": 6,
        "importPath": "lms-service.schemas.plan",
        "description": "lms-service.schemas.plan",
        "peekOfCode": "class PlanCreate(PlanBase):\n    \"\"\"Plan creattion model\"\"\"\nclass PlanUpdate(BaseModel):\n    \"\"\"Plan update model\"\"\"\n    name: Optional[str] = None\n    description: Optional[str] = None\n    price: Optional[float] = None\n    billing_cycle: Optional[BillingCycle] = None\n    features: list[Optional[str]] = None\n    active: Optional[bool] = None",
        "detail": "lms-service.schemas.plan",
        "documentation": {}
    },
    {
        "label": "PlanUpdate",
        "kind": 6,
        "importPath": "lms-service.schemas.plan",
        "description": "lms-service.schemas.plan",
        "peekOfCode": "class PlanUpdate(BaseModel):\n    \"\"\"Plan update model\"\"\"\n    name: Optional[str] = None\n    description: Optional[str] = None\n    price: Optional[float] = None\n    billing_cycle: Optional[BillingCycle] = None\n    features: list[Optional[str]] = None\n    active: Optional[bool] = None\nclass Plan(PlanBase):\n    \"\"\"Subscription Plan Schema\"\"\"",
        "detail": "lms-service.schemas.plan",
        "documentation": {}
    },
    {
        "label": "Plan",
        "kind": 6,
        "importPath": "lms-service.schemas.plan",
        "description": "lms-service.schemas.plan",
        "peekOfCode": "class Plan(PlanBase):\n    \"\"\"Subscription Plan Schema\"\"\"\n    id: UUID4\n    created_at: datetime\n    updated_at: datetime",
        "detail": "lms-service.schemas.plan",
        "documentation": {}
    },
    {
        "label": "ReviewBase",
        "kind": 6,
        "importPath": "lms-service.schemas.reviews",
        "description": "lms-service.schemas.reviews",
        "peekOfCode": "class ReviewBase(BaseModel):\n    \"\"\"Course review base model\"\"\"\n    course_id: UUID4\n    rating: int\n    comment: str\nclass ReviewCreate(ReviewBase):\n    \"\"\"Course Review Creation model\"\"\"\nclass ReviewUpdate(BaseModel):\n    \"\"\"Course review update model\"\"\"\n    rating: Optional[int] = None",
        "detail": "lms-service.schemas.reviews",
        "documentation": {}
    },
    {
        "label": "ReviewCreate",
        "kind": 6,
        "importPath": "lms-service.schemas.reviews",
        "description": "lms-service.schemas.reviews",
        "peekOfCode": "class ReviewCreate(ReviewBase):\n    \"\"\"Course Review Creation model\"\"\"\nclass ReviewUpdate(BaseModel):\n    \"\"\"Course review update model\"\"\"\n    rating: Optional[int] = None\n    comment: Optional[str] = None\nclass Review(ReviewCreate):\n    \"\"\"Course review schema\"\"\"\n    id: UUID4\n    student_id: UUID4",
        "detail": "lms-service.schemas.reviews",
        "documentation": {}
    },
    {
        "label": "ReviewUpdate",
        "kind": 6,
        "importPath": "lms-service.schemas.reviews",
        "description": "lms-service.schemas.reviews",
        "peekOfCode": "class ReviewUpdate(BaseModel):\n    \"\"\"Course review update model\"\"\"\n    rating: Optional[int] = None\n    comment: Optional[str] = None\nclass Review(ReviewCreate):\n    \"\"\"Course review schema\"\"\"\n    id: UUID4\n    student_id: UUID4\n    created_at: datetime\n    updated_at: datetime",
        "detail": "lms-service.schemas.reviews",
        "documentation": {}
    },
    {
        "label": "Review",
        "kind": 6,
        "importPath": "lms-service.schemas.reviews",
        "description": "lms-service.schemas.reviews",
        "peekOfCode": "class Review(ReviewCreate):\n    \"\"\"Course review schema\"\"\"\n    id: UUID4\n    student_id: UUID4\n    created_at: datetime\n    updated_at: datetime",
        "detail": "lms-service.schemas.reviews",
        "documentation": {}
    },
    {
        "label": "Roles",
        "kind": 6,
        "importPath": "lms-service.schemas.roles",
        "description": "lms-service.schemas.roles",
        "peekOfCode": "class Roles(str, Enum):\n    \"\"\"roles enum\"\"\"\n    STUDENT = \"Student\"\n    INSTRUCTOR = \"Instructor\"\n    STAFF = \"Staff\"\n    ADMIN = \"Administrator\"",
        "detail": "lms-service.schemas.roles",
        "documentation": {}
    },
    {
        "label": "StudentBase",
        "kind": 6,
        "importPath": "lms-service.schemas.student",
        "description": "lms-service.schemas.student",
        "peekOfCode": "class StudentBase(BaseModel):\n    \"\"\"Student base model\"\"\"\n    bio: Optional[str] = None\n    goal: Optional[str] = None\n    skills: Optional[list[str]] = []\n    hobbies: Optional[list[str]] = []\n    preference: Optional[list[str]] = []\nclass StudentCreate(StudentBase):\n    \"\"\"Student creation model\"\"\"\n    user_id: Optional[str] = None",
        "detail": "lms-service.schemas.student",
        "documentation": {}
    },
    {
        "label": "StudentCreate",
        "kind": 6,
        "importPath": "lms-service.schemas.student",
        "description": "lms-service.schemas.student",
        "peekOfCode": "class StudentCreate(StudentBase):\n    \"\"\"Student creation model\"\"\"\n    user_id: Optional[str] = None\nclass StudentUpdate(StudentBase):\n    \"\"\"Student update model\"\"\"\nclass Student(StudentBase):\n    \"\"\"Student schema\"\"\"\n    id: UUID4\n    user_id: str\n    created_at: datetime",
        "detail": "lms-service.schemas.student",
        "documentation": {}
    },
    {
        "label": "StudentUpdate",
        "kind": 6,
        "importPath": "lms-service.schemas.student",
        "description": "lms-service.schemas.student",
        "peekOfCode": "class StudentUpdate(StudentBase):\n    \"\"\"Student update model\"\"\"\nclass Student(StudentBase):\n    \"\"\"Student schema\"\"\"\n    id: UUID4\n    user_id: str\n    created_at: datetime\n    updated_at: datetime",
        "detail": "lms-service.schemas.student",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "lms-service.schemas.student",
        "description": "lms-service.schemas.student",
        "peekOfCode": "class Student(StudentBase):\n    \"\"\"Student schema\"\"\"\n    id: UUID4\n    user_id: str\n    created_at: datetime\n    updated_at: datetime",
        "detail": "lms-service.schemas.student",
        "documentation": {}
    },
    {
        "label": "SubscriptionStatus",
        "kind": 6,
        "importPath": "lms-service.schemas.subscription",
        "description": "lms-service.schemas.subscription",
        "peekOfCode": "class SubscriptionStatus(Enum):\n    \"\"\"Subscription statuses\"\"\"\n    ACTIVE = \"Active\"\n    CANCELLED = \"Cancelled\"\n    SUSPENDED = \"Suspended\"\nclass SubscriptionBase(BaseModel):\n    \"\"\"Base Subscription Model\"\"\"\n    user_id: Optional[str] = None\nclass SubscriptionCreate(SubscriptionBase):\n    \"\"\"Model for creating a new subscription\"\"\"",
        "detail": "lms-service.schemas.subscription",
        "documentation": {}
    },
    {
        "label": "SubscriptionBase",
        "kind": 6,
        "importPath": "lms-service.schemas.subscription",
        "description": "lms-service.schemas.subscription",
        "peekOfCode": "class SubscriptionBase(BaseModel):\n    \"\"\"Base Subscription Model\"\"\"\n    user_id: Optional[str] = None\nclass SubscriptionCreate(SubscriptionBase):\n    \"\"\"Model for creating a new subscription\"\"\"\n    plan_id: UUID4\nclass SubscriptionUpdate(BaseModel):\n    \"\"\"Suscription update model\"\"\"\n    status: Optional[SubscriptionStatus] = None\n    plan_id: Optional[UUID4] = None",
        "detail": "lms-service.schemas.subscription",
        "documentation": {}
    },
    {
        "label": "SubscriptionCreate",
        "kind": 6,
        "importPath": "lms-service.schemas.subscription",
        "description": "lms-service.schemas.subscription",
        "peekOfCode": "class SubscriptionCreate(SubscriptionBase):\n    \"\"\"Model for creating a new subscription\"\"\"\n    plan_id: UUID4\nclass SubscriptionUpdate(BaseModel):\n    \"\"\"Suscription update model\"\"\"\n    status: Optional[SubscriptionStatus] = None\n    plan_id: Optional[UUID4] = None\n    cancel_resaon: Optional[str] = None\nclass Subscription(SubscriptionBase):\n    \"\"\"Full Subscription Schema\"\"\"",
        "detail": "lms-service.schemas.subscription",
        "documentation": {}
    },
    {
        "label": "SubscriptionUpdate",
        "kind": 6,
        "importPath": "lms-service.schemas.subscription",
        "description": "lms-service.schemas.subscription",
        "peekOfCode": "class SubscriptionUpdate(BaseModel):\n    \"\"\"Suscription update model\"\"\"\n    status: Optional[SubscriptionStatus] = None\n    plan_id: Optional[UUID4] = None\n    cancel_resaon: Optional[str] = None\nclass Subscription(SubscriptionBase):\n    \"\"\"Full Subscription Schema\"\"\"\n    id: UUID4\n    user_id: str\n    plan: Plan",
        "detail": "lms-service.schemas.subscription",
        "documentation": {}
    },
    {
        "label": "Subscription",
        "kind": 6,
        "importPath": "lms-service.schemas.subscription",
        "description": "lms-service.schemas.subscription",
        "peekOfCode": "class Subscription(SubscriptionBase):\n    \"\"\"Full Subscription Schema\"\"\"\n    id: UUID4\n    user_id: str\n    plan: Plan\n    start_date: datetime\n    end_date: datetime = None\n    status: SubscriptionStatus\n    renewal_date: Optional[datetime] = None\n    cancel_resaon: Optional[str] = None",
        "detail": "lms-service.schemas.subscription",
        "documentation": {}
    },
    {
        "label": "jinja_env",
        "kind": 5,
        "importPath": "lms-service.services.certificate",
        "description": "lms-service.services.certificate",
        "peekOfCode": "jinja_env = Environment()\njinja_env.undefined = StrictUndefined\njinja_env.trim_blocks = True\njinja_env.lstrip_blocks = True\njinja_env.filters[\"none_to_empty\"] = lambda value: value or \"\"\nasync def generate_certificate(progress: CourseProgress, user: KeycloakUser):\n    \"\"\"Generate student certificate at the end of course\"\"\"\n    output_dir = \"tmp\"\n    try:\n        template_path = \"templates/leapfrog.docx\"",
        "detail": "lms-service.services.certificate",
        "documentation": {}
    },
    {
        "label": "jinja_env.undefined",
        "kind": 5,
        "importPath": "lms-service.services.certificate",
        "description": "lms-service.services.certificate",
        "peekOfCode": "jinja_env.undefined = StrictUndefined\njinja_env.trim_blocks = True\njinja_env.lstrip_blocks = True\njinja_env.filters[\"none_to_empty\"] = lambda value: value or \"\"\nasync def generate_certificate(progress: CourseProgress, user: KeycloakUser):\n    \"\"\"Generate student certificate at the end of course\"\"\"\n    output_dir = \"tmp\"\n    try:\n        template_path = \"templates/leapfrog.docx\"\n        if not os.path.exists(template_path):",
        "detail": "lms-service.services.certificate",
        "documentation": {}
    },
    {
        "label": "jinja_env.trim_blocks",
        "kind": 5,
        "importPath": "lms-service.services.certificate",
        "description": "lms-service.services.certificate",
        "peekOfCode": "jinja_env.trim_blocks = True\njinja_env.lstrip_blocks = True\njinja_env.filters[\"none_to_empty\"] = lambda value: value or \"\"\nasync def generate_certificate(progress: CourseProgress, user: KeycloakUser):\n    \"\"\"Generate student certificate at the end of course\"\"\"\n    output_dir = \"tmp\"\n    try:\n        template_path = \"templates/leapfrog.docx\"\n        if not os.path.exists(template_path):\n            raise FileNotFoundError(f\"Template file not found: {template_path}\")",
        "detail": "lms-service.services.certificate",
        "documentation": {}
    },
    {
        "label": "jinja_env.lstrip_blocks",
        "kind": 5,
        "importPath": "lms-service.services.certificate",
        "description": "lms-service.services.certificate",
        "peekOfCode": "jinja_env.lstrip_blocks = True\njinja_env.filters[\"none_to_empty\"] = lambda value: value or \"\"\nasync def generate_certificate(progress: CourseProgress, user: KeycloakUser):\n    \"\"\"Generate student certificate at the end of course\"\"\"\n    output_dir = \"tmp\"\n    try:\n        template_path = \"templates/leapfrog.docx\"\n        if not os.path.exists(template_path):\n            raise FileNotFoundError(f\"Template file not found: {template_path}\")\n        template = DocxTemplate(template_path)",
        "detail": "lms-service.services.certificate",
        "documentation": {}
    },
    {
        "label": "jinja_env.filters[\"none_to_empty\"]",
        "kind": 5,
        "importPath": "lms-service.services.certificate",
        "description": "lms-service.services.certificate",
        "peekOfCode": "jinja_env.filters[\"none_to_empty\"] = lambda value: value or \"\"\nasync def generate_certificate(progress: CourseProgress, user: KeycloakUser):\n    \"\"\"Generate student certificate at the end of course\"\"\"\n    output_dir = \"tmp\"\n    try:\n        template_path = \"templates/leapfrog.docx\"\n        if not os.path.exists(template_path):\n            raise FileNotFoundError(f\"Template file not found: {template_path}\")\n        template = DocxTemplate(template_path)\n        student_name = f\"{user.firstName} {user.lastName}\"",
        "detail": "lms-service.services.certificate",
        "documentation": {}
    },
    {
        "label": "minio_client",
        "kind": 5,
        "importPath": "lms-service.services.file_service",
        "description": "lms-service.services.file_service",
        "peekOfCode": "minio_client = Minio(\n    settings.MINIO_ENDPOINT,\n    access_key=settings.MINIO_ACCESS_KEY,\n    secret_key=settings.MINIO_SECRET_KEY,\n    secure=False,\n)\ntry:\n    if not minio_client.bucket_exists(settings.MINIO_BUCKET_NAME):\n        logger.info(\"Creating bucket : %s in minio...\", settings.MINIO_BUCKET_NAME)\n        minio_client.make_bucket(settings.MINIO_BUCKET_NAME)",
        "detail": "lms-service.services.file_service",
        "documentation": {}
    },
    {
        "label": "test_read_root",
        "kind": 2,
        "importPath": "lms-service.tests.test_root",
        "description": "lms-service.tests.test_root",
        "peekOfCode": "def test_read_root():\n    \"\"\"test root endpoint\"\"\"\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == \"LMS SERVICE\"",
        "detail": "lms-service.tests.test_root",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "lms-service.tests.test_root",
        "description": "lms-service.tests.test_root",
        "peekOfCode": "client = TestClient(app)\ndef test_read_root():\n    \"\"\"test root endpoint\"\"\"\n    response = client.get(\"/\")\n    assert response.status_code == 200\n    assert response.json() == \"LMS SERVICE\"",
        "detail": "lms-service.tests.test_root",
        "documentation": {}
    },
    {
        "label": "CustomParams",
        "kind": 6,
        "importPath": "lms-service.utils.pagination",
        "description": "lms-service.utils.pagination",
        "peekOfCode": "class CustomParams(Params):\n    \"\"\"Custom Pagination params\"\"\"\n    page: int = 1\n    size: int = 10\nasync def paginate_model(\n    query: FindMany[Document],\n    params: CustomParams,\n    fetch_links: bool = False,\n    full_load: bool = False,\n):",
        "detail": "lms-service.utils.pagination",
        "documentation": {}
    },
    {
        "label": "token_saver",
        "kind": 2,
        "importPath": "lms-service.utils.token",
        "description": "lms-service.utils.token",
        "peekOfCode": "def token_saver(token):\n    \"\"\"Save token\"\"\"\n    with open(\"token.json\", \"w\", encoding=\"utf-8\") as file:\n        json.dump(token, file, indent=4)\ndef token_fetcher():\n    \"\"\"Fetch Token\"\"\"\n    try:\n        with open(\"token.json\", \"r\", encoding=\"utf-8\") as file:\n            token = json.load(file)\n            return token",
        "detail": "lms-service.utils.token",
        "documentation": {}
    },
    {
        "label": "token_fetcher",
        "kind": 2,
        "importPath": "lms-service.utils.token",
        "description": "lms-service.utils.token",
        "peekOfCode": "def token_fetcher():\n    \"\"\"Fetch Token\"\"\"\n    try:\n        with open(\"token.json\", \"r\", encoding=\"utf-8\") as file:\n            token = json.load(file)\n            return token\n    # pylint: disable=W0718\n    except Exception:\n        return None",
        "detail": "lms-service.utils.token",
        "documentation": {}
    },
    {
        "label": "read_root",
        "kind": 2,
        "importPath": "lms-service.main",
        "description": "lms-service.main",
        "peekOfCode": "def read_root():\n    \"\"\"Root Endpoint\"\"\"\n    return settings.API_TITLE\nif __name__ == \"__main__\":\n    uvicorn.run(\n        \"main:app\",\n        host=settings.API_HOST,\n        port=settings.API_PORT,\n        reload=True,\n    )",
        "detail": "lms-service.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "lms-service.main",
        "description": "lms-service.main",
        "peekOfCode": "app = FastAPI(lifespan=lifespan, title=settings.API_TITLE)\n# Init IDP Connection\nidp.add_swagger_config(app)\n# Exceptions management\n@app.exception_handler(RequestValidationError)\nasync def validation_exception_handler(_: Request, exc: RequestValidationError):\n    \"\"\"Validation  exception handler\"\"\"\n    return JSONResponse(\n        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,\n        # Unprocessable Entity",
        "detail": "lms-service.main",
        "documentation": {}
    }
]